# .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Simplified matrix - focus on essential combinations first
        include:
          - os: ubuntu-latest
            python-version: "3.8"  # Minimum supported version
          - os: ubuntu-latest
            python-version: "3.11" # Current stable version
          - os: windows-latest
            python-version: "3.9"  # Windows compatibility check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ matrix.python-version }}-
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: "1.8.3"
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Configure Poetry on Windows
      if: runner.os == 'Windows'
      run: |
        echo "$env:USERPROFILE\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests with coverage
      run: |
        poetry run pytest tests/ --cov=path_comment --cov-report=xml --cov-report=term-missing --junitxml=pytest.xml

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-lint-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-lint-

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: "1.8.3"
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-lint-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction

    - name: Run Ruff linting
      run: |
        poetry run ruff check . --output-format=github

    - name: Run Ruff formatting check
      run: |
        poetry run ruff format --check .

    - name: Run MyPy type checking
      run: |
        poetry run mypy src/path_comment tests

    - name: Run Bandit security linting
      run: |
        poetry run bandit -r src/path_comment

# Docformatter removed due to persistent conflicts with other formatting tools

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: "1.8.3"
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Test package installation
      run: |
        pip install dist/*.whl
        path-comment-hook --help
        path-comment-hook welcome

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: "1.8.3"
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/ -v

    - name: Test pre-commit hook integration
      run: |
        # Install pre-commit
        pip install pre-commit

        # Create test repository
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"
        mkdir test-repo && cd test-repo
        git init .

        # Create pre-commit config
        cat > .pre-commit-config.yaml << 'EOF'
        repos:
          - repo: local
            hooks:
              - id: path-comment
                name: path-comment-hook
                entry: poetry run path-comment-hook
                language: system
                files: \.(py|js|ts|sh|yml|yaml|toml)$
        EOF

        # Install and test
        pre-commit install
        echo "print('test')" > test.py
        git add test.py
        pre-commit run --all-files || true

        # Verify comment was added
        grep -q "# test.py" test.py || (echo "Path comment not added!" && exit 1)
        echo "âœ“ Pre-commit integration test passed"
