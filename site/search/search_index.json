{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"path-comment-hook","text":"<p>Add file path headers to your source code automatically.</p> <p>Never lose track of where you are in large codebases. This pre-commit hook automatically adds file path comments to the top of your source files, making code navigation effortless.</p> <ul> <li> <p>:material-clock-fast:{ .lg .middle } Set up in 5 minutes</p> <p>Install with pip and integrate with pre-commit in minutes.</p> <p>:octicons-arrow-right-24: Getting started</p> </li> <li> <p>:material-file-tree:{ .lg .middle } Better Code Navigation</p> <p>Know exactly where you are in large codebases.</p> <p>:octicons-arrow-right-24: Why path headers?</p> </li> <li> <p>:material-cog:{ .lg .middle } Highly Configurable</p> <p>Customize comment styles, exclusions, and more.</p> <p>:octicons-arrow-right-24: Configuration</p> </li> <li> <p>:material-language-python:{ .lg .middle } Multi-Language Support</p> <p>Works with Python, JavaScript, TypeScript, C/C++, and more.</p> <p>:octicons-arrow-right-24: Supported languages</p> </li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"BeforeAfter <pre><code>def calculate_tax(amount, rate):\n    \"\"\"Calculate tax based on amount and rate.\"\"\"\n    return amount * rate\n\ndef format_currency(amount):\n    \"\"\"Format amount as currency string.\"\"\"\n    return f\"${amount:.2f}\"\n</code></pre> <pre><code># src/utils/tax_calculator.py\n\ndef calculate_tax(amount, rate):\n    \"\"\"Calculate tax based on amount and rate.\"\"\"\n    return amount * rate\n\ndef format_currency(amount):\n    \"\"\"Format amount as currency string.\"\"\"\n    return f\"${amount:.2f}\"\n</code></pre>"},{"location":"#installation","title":"Installation","text":"pippipxpoetry <pre><code>pip install path-comment-hook\n</code></pre> <pre><code>pipx install path-comment-hook\n</code></pre> <pre><code>poetry add --group dev path-comment-hook\n</code></pre>"},{"location":"#pre-commit-integration","title":"Pre-commit Integration","text":"<p>Add to your <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0  # Use the latest version\n    hooks:\n      - id: path-comment\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Fast: Parallel processing for large codebases</li> <li>Configurable: Customize comment styles and exclusions</li> <li>Multi-language: Support for 10+ programming languages</li> <li>Zero dependencies: Lightweight and reliable</li> <li>Reversible: Easy to add or remove headers</li> <li>Smart detection: Handles shebangs and encoding automatically</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li> <p>Install the hook:    <pre><code>pip install path-comment-hook\n</code></pre></p> </li> <li> <p>Add to pre-commit config:    <pre><code>- repo: https://github.com/Shorzinator/path-comment-hook\n  rev: v0.3.0\n  hooks:\n    - id: path-comment\n</code></pre></p> </li> <li> <p>Run on your project:    <pre><code>pre-commit run path-comment --all-files\n</code></pre></p> </li> </ol> <p>That's it! Your files now have path headers for better navigation.</p>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li>Quick Start Guide - Get up and running in 5 minutes</li> <li>User Guide - Learn all the commands and options</li> <li>Configuration - Customize for your project</li> <li>Pre-commit Setup - Integrate with your workflow</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub Issues - Report bugs or request features</li> <li>GitHub Discussions - Ask questions and share ideas</li> <li>Contributing Guide - Help improve the project</li> </ul> <p>path-comment-hook is open source and available under the MIT license.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to path-comment-hook are documented here.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#changelog_1","title":"Changelog","text":"<p>All notable changes to path-comment-hook will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>GitHub Issue and Pull Request templates</li> <li>Comprehensive security policy (SECURITY.md)</li> <li>Professional contributing guidelines (CONTRIBUTING.md)</li> <li>EditorConfig for consistent coding standards</li> <li>Development scripts for documentation</li> <li>Automated changelog maintenance</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated project infrastructure to enterprise standards</li> <li>Enhanced documentation with professional polish</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Resolved all CodeQL security warnings</li> <li>Improved error handling and input validation</li> </ul>"},{"location":"changelog/#010-2025-06-xx-upcoming","title":"[0.1.0] - 2025-06-XX (Upcoming)","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Core Functionality</li> <li>Path comment injection with <code>run</code> command</li> <li>Path comment deletion with <code>delete</code> command</li> <li>Configuration display with <code>show-config</code> command</li> <li>Comprehensive CLI with Typer framework</li> <li> <p>ASCII art branding and welcome message</p> </li> <li> <p>File Processing</p> </li> <li>Intelligent file type detection (10+ languages)</li> <li>Binary file detection and skipping</li> <li>Shebang handling for script files</li> <li>Cross-platform line ending preservation (LF/CRLF)</li> <li>Atomic file writes for safety</li> <li> <p>Encoding detection with UTF-8 preference and chardet fallback</p> </li> <li> <p>Configuration System</p> </li> <li>TOML configuration in pyproject.toml</li> <li>52 default ignore patterns (VCS, build artifacts, IDEs)</li> <li>Custom comment style mapping</li> <li>Exclude patterns with glob support</li> <li> <p>Smart defaults for common project types</p> </li> <li> <p>Performance &amp; Reliability</p> </li> <li>Parallel processing with ThreadPoolExecutor</li> <li>Progress bars for bulk operations</li> <li>Concise output for <code>--all</code> operations</li> <li>Memory-efficient file handling</li> <li> <p>Comprehensive error handling</p> </li> <li> <p>CLI Experience</p> </li> <li>Auto-discovery mode with <code>--all</code> flag</li> <li>Check mode for validation without changes</li> <li>Verbose output with detailed summaries</li> <li>Help system with <code>-h</code> and <code>--help</code> support</li> <li> <p>Professional error messages and feedback</p> </li> <li> <p>Developer Experience</p> </li> <li>Pre-commit hook integration</li> <li>152 comprehensive tests (unit + integration)</li> <li>Cross-platform CI/CD (Ubuntu, Windows, macOS)</li> <li>Real-time coverage monitoring via Codecov</li> <li>Security scanning with CodeQL</li> <li> <p>Automated dependency management with Dependabot</p> </li> <li> <p>Documentation</p> </li> <li>Complete MkDocs site with Material theme</li> <li>GitHub Pages deployment</li> <li>Comprehensive user guides and examples</li> <li>API reference documentation</li> <li>Installation and quick-start guides</li> <li>FAQ and troubleshooting sections</li> </ul>"},{"location":"changelog/#technical-details","title":"Technical Details","text":"<ul> <li>Languages Supported: Python, JavaScript, TypeScript, C/C++, Shell, YAML, TOML, JSON, Makefile</li> <li>Comment Styles: <code>#</code> for Python/Shell/YAML, <code>//</code> for JavaScript/C/C++</li> <li>File Detection: Uses <code>identify</code> library for robust file type recognition</li> <li>Cross-Platform: Tested on Ubuntu 22.04, Windows 11, macOS 13+</li> <li>Python Support: 3.8, 3.9, 3.10, 3.11, 3.12</li> <li>Dependencies: Minimal (typer, rich, chardet, identify)</li> </ul>"},{"location":"changelog/#infrastructure","title":"Infrastructure","text":"<ul> <li>CI/CD: GitHub Actions with matrix testing</li> <li>Security: CodeQL analysis, Bandit scanning, dependency auditing</li> <li>Quality: Ruff linting, MyPy type checking, 69% test coverage</li> <li>Documentation: Automated MkDocs deployment to GitHub Pages</li> <li>Release: Automated PyPI publishing with GitHub releases</li> </ul>"},{"location":"changelog/#development-history","title":"Development History","text":""},{"location":"changelog/#phase-3-enterprise-polish-december-2024","title":"Phase 3: Enterprise Polish (December 2024)","text":"<ul> <li>\u2705 Resolved all CodeQL security warnings</li> <li>\u2705 Added GitHub issue/PR templates</li> <li>\u2705 Created comprehensive security policy</li> <li>\u2705 Updated contributing guidelines</li> <li>\u2705 Added EditorConfig for consistency</li> <li>\u2705 Created development scripts</li> <li>\u2705 Enhanced project documentation</li> </ul>"},{"location":"changelog/#phase-2-infrastructure-documentation-november-2024","title":"Phase 2: Infrastructure &amp; Documentation (November 2024)","text":"<ul> <li>\u2705 Complete MkDocs documentation site</li> <li>\u2705 GitHub Pages deployment automation</li> <li>\u2705 Cross-platform CI/CD pipeline</li> <li>\u2705 Security scanning integration</li> <li>\u2705 Codecov coverage monitoring</li> <li>\u2705 ASCII art branding integration</li> <li>\u2705 Badge accuracy improvements</li> </ul>"},{"location":"changelog/#phase-1-core-development-june-october-2024","title":"Phase 1: Core Development (June-October 2024)","text":"<ul> <li>\u2705 Basic CLI with run command</li> <li>\u2705 File type detection system</li> <li>\u2705 Configuration management</li> <li>\u2705 Test suite development (152 tests)</li> <li>\u2705 Delete command implementation</li> <li>\u2705 Cross-platform compatibility</li> <li>\u2705 Pre-commit integration</li> <li>\u2705 Documentation framework</li> </ul>"},{"location":"changelog/#release-process","title":"Release Process","text":"<p>Releases are automated through GitHub Actions:</p> <ol> <li>Version Update: Update version in <code>pyproject.toml</code></li> <li>Changelog Update: Add release notes to this file</li> <li>Release PR: Create PR with version bump</li> <li>Automated Release: Merge triggers PyPI publication</li> <li>GitHub Release: Automated release with changelog</li> </ol>"},{"location":"changelog/#migration-guide","title":"Migration Guide","text":""},{"location":"changelog/#from-pre-10-versions","title":"From Pre-1.0 Versions","text":"<p>This is the first stable release. No migration needed.</p>"},{"location":"changelog/#security-updates","title":"Security Updates","text":"<p>All security updates are documented here with: - CVE identifiers (if applicable) - Affected versions - Mitigation steps - Upgrade recommendations</p>"},{"location":"changelog/#support","title":"Support","text":"<ul> <li>Current Version: 0.1.x (Active development and support)</li> <li>Security Support: Latest version only</li> <li>EOL Policy: Previous minor versions supported for 6 months</li> </ul>"},{"location":"changelog/#contributing","title":"Contributing","text":"<p>See CONTRIBUTING.md for detailed information about: - Development setup - Testing requirements - Code style guidelines - Pull request process - Release procedures</p> <p>Note: This changelog is automatically updated during the release process. For unreleased changes, see the commit history.</p>"},{"location":"changelog/#release-process_1","title":"Release Process","text":"<p>path-comment-hook follows semantic versioning:</p> <ul> <li>Major version (X.0.0): Breaking changes</li> <li>Minor version (0.X.0): New features, backwards compatible</li> <li>Patch version (0.0.X): Bug fixes, backwards compatible</li> </ul>"},{"location":"changelog/#what-constitutes-a-breaking-change","title":"What Constitutes a Breaking Change?","text":"<ul> <li>Changes to CLI argument names or behavior</li> <li>Removal of configuration options</li> <li>Changes to default behavior that affect existing users</li> <li>API changes that break existing integrations</li> </ul>"},{"location":"changelog/#release-schedule","title":"Release Schedule","text":"<ul> <li>Patch releases: As needed for bug fixes</li> <li>Minor releases: Monthly or when significant features are ready</li> <li>Major releases: Rarely, only when necessary for architectural changes</li> </ul>"},{"location":"changelog/#getting-latest-releases","title":"Getting Latest Releases","text":""},{"location":"changelog/#pypi","title":"PyPI","text":"<pre><code>pip install --upgrade path-comment-hook\n</code></pre>"},{"location":"changelog/#github-releases","title":"GitHub Releases","text":"<p>Visit GitHub Releases for: - Detailed release notes - Binary downloads - Source code archives</p>"},{"location":"changelog/#pre-commit","title":"Pre-commit","text":"<p>Update your <code>.pre-commit-config.yaml</code>: <pre><code>repos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0  # Use latest version\n    hooks:\n      - id: path-comment\n</code></pre></p> <p>Then run: <pre><code>pre-commit autoupdate\n</code></pre></p>"},{"location":"changelog/#migration-guides","title":"Migration Guides","text":""},{"location":"changelog/#upgrading-from-02x-to-03x","title":"Upgrading from 0.2.x to 0.3.x","text":"<p>Key changes in v0.3.0: - Enhanced file handling with better encoding detection - Improved parallel processing performance - New configuration options</p> <p>To upgrade: 1. Update your installation: <code>pip install --upgrade path-comment-hook</code> 2. Review configuration: Some default exclusions may have changed 3. Test on a branch: Run <code>path-comment-hook --check --all</code> to verify</p>"},{"location":"changelog/#upgrading-from-01x-to-02x","title":"Upgrading from 0.1.x to 0.2.x","text":"<p>Key changes in v0.2.0: - Complete rewrite with better architecture - New CLI interface - Configuration in <code>pyproject.toml</code></p> <p>To upgrade: 1. Update configuration from old format to <code>pyproject.toml</code> 2. Review new CLI options 3. Update pre-commit configuration if needed</p>"},{"location":"changelog/#beta-releases","title":"Beta Releases","text":"<p>Beta releases are available for testing new features:</p> <pre><code># Install latest beta\npip install --pre path-comment-hook\n\n# Or specific beta version\npip install path-comment-hook==0.4.0b1\n</code></pre> <p>Beta Releases</p> <p>Beta releases are for testing only. Don't use in production.</p>"},{"location":"changelog/#deprecation-policy","title":"Deprecation Policy","text":"<p>When features are deprecated:</p> <ol> <li>Announcement: Marked as deprecated in documentation</li> <li>Warning period: Minimum of one minor version with warnings</li> <li>Removal: Removed in next major version</li> </ol> <p>Example timeline: - v0.3.0: Feature deprecated with warnings - v0.4.0: Feature still works but warns - v1.0.0: Feature removed</p>"},{"location":"changelog/#contributing-to-releases","title":"Contributing to Releases","text":"<p>To contribute to releases:</p> <ol> <li>Bug fixes: Target the current release branch</li> <li>Features: Target the development branch</li> <li>Documentation: Can target either branch</li> </ol> <p>See Contributing Guide for details.</p>"},{"location":"changelog/#security-updates_1","title":"Security Updates","text":"<p>Security issues are addressed promptly:</p> <ul> <li>Critical: Emergency patch release</li> <li>High: Patch release within 1 week</li> <li>Medium: Include in next scheduled release</li> </ul> <p>To report security issues, see our Security Policy.</p>"},{"location":"changelog/#staying-updated","title":"Staying Updated","text":"<p>Stay informed about releases:</p> <ul> <li>Star the repository on GitHub for updates</li> <li>Watch releases to get notifications</li> <li>Follow the changelog for detailed changes</li> <li>Follow updates through GitHub Discussions</li> </ul>"},{"location":"changelog/#version-support","title":"Version Support","text":"<ul> <li>Current major version: Full support with new features and bug fixes</li> <li>Previous major version: Security updates and critical bug fixes only</li> <li>Older versions: Community support only</li> </ul> <p>Currently supported versions: - 0.3.x: Full support - 0.2.x: Security updates only - 0.1.x: No longer supported</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-path-comment-hook","title":"What is path-comment-hook?","text":"<p>path-comment-hook is a pre-commit hook that automatically adds file path comments to the top of your source files. This helps with code navigation, especially in large codebases where you might lose track of which file you're looking at.</p>"},{"location":"faq/#why-would-i-want-path-headers-in-my-files","title":"Why would I want path headers in my files?","text":"<p>Path headers solve several common problems:</p> <ul> <li>Lost context: When viewing code snippets in reviews, documentation, or search results</li> <li>Navigation: Quickly understanding where you are in large codebases</li> <li>Team collaboration: New team members can orient themselves faster</li> <li>Documentation: Code examples are clearer with context</li> </ul> <p>See Why Path Headers? for detailed benefits.</p>"},{"location":"faq/#how-is-this-different-from-ide-breadcrumbs","title":"How is this different from IDE breadcrumbs?","text":"<p>IDE breadcrumbs only show when you're in the IDE. Path headers are embedded in the file itself, so they're visible in: - Code reviews (GitHub, GitLab, etc.) - Documentation - Search results - Terminal editors - Code sharing/examples</p>"},{"location":"faq/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"faq/#how-do-i-install-path-comment-hook","title":"How do I install path-comment-hook?","text":"<p>Choose your preferred method:</p> <pre><code># pip\npip install path-comment-hook\n\n# pipx (recommended)\npipx install path-comment-hook\n\n# Poetry\npoetry add --group dev path-comment-hook\n</code></pre> <p>See Installation for detailed instructions.</p>"},{"location":"faq/#do-i-need-to-install-it-if-i-only-use-pre-commit","title":"Do I need to install it if I only use pre-commit?","text":"<p>No! When using pre-commit, the tool is automatically installed in an isolated environment. You only need to install it directly if you want to use it from the command line.</p>"},{"location":"faq/#how-do-i-set-it-up-with-pre-commit","title":"How do I set it up with pre-commit?","text":"<p>Add to your <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0  # Use the latest version\n    hooks:\n      - id: path-comment\n</code></pre> <p>Then run <code>pre-commit install</code>.</p>"},{"location":"faq/#usage-questions","title":"Usage Questions","text":""},{"location":"faq/#what-file-types-are-supported","title":"What file types are supported?","text":"<p>Currently supported: - Python (<code>.py</code>) - JavaScript (<code>.js</code>) - C/C++ (<code>.c</code>, <code>.h</code>) - Shell scripts (<code>.sh</code>, <code>.bash</code>) - YAML (<code>.yml</code>, <code>.yaml</code>) - TOML (<code>.toml</code>) - Makefile - Cython (<code>.pyx</code>)</p> <p>See File Types for the complete list.</p>"},{"location":"faq/#can-i-add-support-for-new-file-types","title":"Can I add support for new file types?","text":"<p>Yes! File type support is determined by the <code>COMMENT_PREFIXES</code> mapping in the <code>detectors.py</code> module. You can:</p> <ol> <li>Fork the repository and add the mapping</li> <li>Submit a pull request</li> <li>Or modify it locally for your needs</li> </ol>"},{"location":"faq/#how-do-i-exclude-certain-files","title":"How do I exclude certain files?","text":"<p>Configure exclusions in your <code>pyproject.toml</code>:</p> <pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"tests/fixtures/**\",\n    \"generated/**\"\n]\n</code></pre> <p>See Configuration for details.</p>"},{"location":"faq/#can-i-customize-the-header-format","title":"Can I customize the header format?","text":"<p>Currently, headers use the standard format: <code># path/to/file.py</code>. Custom formats aren't supported yet, but this is planned for a future release.</p>"},{"location":"faq/#common-issues","title":"Common Issues","text":""},{"location":"faq/#command-not-found-after-installation","title":"\"Command not found\" after installation","text":"<p>This usually means Python's scripts directory isn't in your PATH. Try:</p> <pre><code># Use Python module syntax\npython -m path_comment --help\n\n# Or find where it was installed\npip show -f path-comment-hook\n</code></pre>"},{"location":"faq/#files-arent-being-processed","title":"Files aren't being processed","text":"<p>Check these common causes:</p> <ol> <li>File type not supported: Use <code>--verbose</code> to see why files are skipped</li> <li>File excluded: Check your <code>exclude_globs</code> configuration</li> <li>Binary file: Binary files are automatically skipped</li> <li>Permission issues: Ensure files are readable/writable</li> </ol>"},{"location":"faq/#headers-look-wrong-or-missing","title":"Headers look wrong or missing","text":"<ol> <li>Check configuration: Run <code>path-comment-hook show-config</code></li> <li>Verify file type: Ensure the file type is supported</li> <li>Check for existing headers: Tool detects and replaces existing headers</li> <li>Use verbose mode: Run with <code>--verbose</code> for detailed output</li> </ol>"},{"location":"faq/#performance-is-slow","title":"Performance is slow","text":"<p>For large projects:</p> <ol> <li>Reduce workers: Use <code>--workers 1</code> or <code>--workers 2</code></li> <li>Add exclusions: Skip directories you don't need processed</li> <li>Process in batches: Process specific directories instead of <code>--all</code></li> </ol> <pre><code># Process specific directories\npath-comment-hook --all src/\npath-comment-hook --all tests/\n</code></pre>"},{"location":"faq/#pre-commit-hook-fails","title":"Pre-commit hook fails","text":"<p>Common pre-commit issues:</p> <ol> <li>Wrong version: Update to latest in <code>.pre-commit-config.yaml</code></li> <li>Configuration error: Check <code>pyproject.toml</code> syntax</li> <li>Permission issues: Ensure files are accessible</li> <li>Update hooks: Run <code>pre-commit autoupdate</code></li> </ol>"},{"location":"faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"faq/#can-i-use-this-in-cicd","title":"Can I use this in CI/CD?","text":"<p>Yes! Use check mode to verify files have headers:</p> <pre><code># GitHub Actions example\n- name: Check path headers\n  run: path-comment-hook --check --all\n</code></pre> <p>This fails (exit code 2) if files need headers.</p>"},{"location":"faq/#how-do-i-remove-all-headers","title":"How do I remove all headers?","text":"<p>Use the delete mode:</p> <pre><code># Check what would be removed\npath-comment-hook --delete --check --all\n\n# Remove headers\npath-comment-hook --delete --all\n</code></pre>"},{"location":"faq/#can-i-run-this-on-specific-files-only","title":"Can I run this on specific files only?","text":"<p>Yes! You can specify individual files or patterns:</p> <pre><code># Specific files\npath-comment-hook src/main.py src/utils.py\n\n# Pattern matching\npath-comment-hook src/**/*.py\n</code></pre>"},{"location":"faq/#how-do-i-handle-files-with-shebangs","title":"How do I handle files with shebangs?","text":"<p>The tool automatically handles shebangs correctly. For files starting with <code>#!/usr/bin/python</code>, the path header is added after the shebang:</p> <pre><code>#!/usr/bin/env python3\n# src/scripts/deploy.py\n\nimport sys\n</code></pre>"},{"location":"faq/#integration-questions","title":"Integration Questions","text":""},{"location":"faq/#does-this-work-with-blackisortother-formatters","title":"Does this work with Black/isort/other formatters?","text":"<p>Yes! path-comment-hook is designed to work with other code formatters. Run it before other formatters in your pre-commit configuration:</p> <pre><code>repos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0\n    hooks:\n      - id: path-comment\n  - repo: https://github.com/psf/black\n    rev: 23.1.0\n    hooks:\n      - id: black\n</code></pre>"},{"location":"faq/#can-i-use-this-with-monorepos","title":"Can I use this with monorepos?","text":"<p>Absolutely! Configure exclusions to handle multiple projects:</p> <pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*/node_modules/**\",\n    \"*/target/**\",\n    \"shared/docs/**\"\n]\n</code></pre>"},{"location":"faq/#does-this-work-with-docker","title":"Does this work with Docker?","text":"<p>Yes! Add to your Dockerfile:</p> <pre><code>FROM python:3.11-slim\nRUN pip install path-comment-hook\nCOPY . /app\nWORKDIR /app\nRUN path-comment-hook --all\n</code></pre>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#how-do-i-debug-issues","title":"How do I debug issues?","text":"<p>Use verbose mode for detailed output:</p> <pre><code>path-comment-hook --verbose --all\n</code></pre> <p>This shows: - Which files are being processed - Why files are skipped - Configuration being used - Processing results</p>"},{"location":"faq/#where-can-i-get-help","title":"Where can I get help?","text":"<ol> <li>Documentation: Start with this documentation</li> <li>GitHub Issues: Report bugs or request features</li> <li>GitHub Discussions: Ask questions and share ideas</li> <li>Troubleshooting Guide: See Troubleshooting</li> </ol>"},{"location":"faq/#how-do-i-report-a-bug","title":"How do I report a bug?","text":"<ol> <li>Check if it's already reported in GitHub Issues</li> <li>If not, create a new issue with:</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Output of <code>path-comment-hook --version</code></li> <li>Sample files (if applicable)</li> </ol>"},{"location":"faq/#can-i-contribute","title":"Can I contribute?","text":"<p>Yes! We welcome contributions:</p> <ul> <li>Bug fixes: Submit pull requests</li> <li>Features: Discuss in issues first</li> <li>Documentation: Always appreciated</li> <li>Testing: Help test beta releases</li> </ul> <p>See Contributing Guide for details.</p>"},{"location":"faq/#migration-compatibility","title":"Migration &amp; Compatibility","text":""},{"location":"faq/#can-i-migrate-from-manual-path-comments","title":"Can I migrate from manual path comments?","text":"<p>Yes! The tool will detect and replace existing path comments. To clean up first:</p> <pre><code># Remove existing headers\npath-comment-hook --delete --all\n\n# Add standardized headers\npath-comment-hook --all\n</code></pre>"},{"location":"faq/#is-this-compatible-with-python-2","title":"Is this compatible with Python 2?","text":"<p>No, path-comment-hook requires Python 3.8 or higher. However, it can process Python 2 source files.</p>"},{"location":"faq/#will-this-break-my-existing-workflow","title":"Will this break my existing workflow?","text":"<p>The tool is designed to be minimally invasive: - Only adds one line per file - Preserves existing formatting - Works with existing tools - Can be easily removed if needed</p>"},{"location":"faq/#future-plans","title":"Future Plans","text":""},{"location":"faq/#what-features-are-planned","title":"What features are planned?","text":"<p>See our roadmap for upcoming features:</p> <ul> <li>Custom header formats</li> <li>More file type support</li> <li>IDE integrations</li> <li>Configuration presets</li> </ul>"},{"location":"faq/#how-can-i-request-a-feature","title":"How can I request a feature?","text":"<ol> <li>Check existing discussions</li> <li>Create a new discussion or issue</li> <li>Describe your use case and proposed solution</li> </ol> <p>Still have questions? Check our GitHub Discussions or open an issue.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions when using path-comment-hook.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#command-not-found","title":"Command Not Found","text":"<p>Problem: <code>path-comment-hook: command not found</code></p> <p>Solutions: 1. Check if it's installed: <code>pip show path-comment-hook</code> 2. Use module syntax: <code>python -m path_comment</code> 3. Add to PATH or use full path</p>"},{"location":"troubleshooting/#permission-errors","title":"Permission Errors","text":"<p>Problem: Permission denied when processing files</p> <p>Solutions: 1. Check file permissions: <code>ls -la file.py</code> 2. Use <code>sudo</code> (not recommended) 3. Change file ownership: <code>chown user:group file.py</code></p>"},{"location":"troubleshooting/#processing-issues","title":"Processing Issues","text":""},{"location":"troubleshooting/#files-not-being-processed","title":"Files Not Being Processed","text":"<p>Common causes: - File type not supported - File excluded by configuration - Binary file (automatically skipped)</p> <p>Debugging: <pre><code>path-comment-hook --verbose file.py\npath-comment-hook show-config\n</code></pre></p>"},{"location":"troubleshooting/#wrong-headers","title":"Wrong Headers","text":"<p>Problem: Headers don't look right</p> <p>Solutions: 1. Check file type detection 2. Verify configuration 3. Check for existing headers</p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-processing","title":"Slow Processing","text":"<p>Solutions: - Reduce workers: <code>--workers 2</code> - Process in batches - Add exclusion patterns</p>"},{"location":"troubleshooting/#memory-usage","title":"Memory Usage","text":"<p>For large files: - Process specific directories - Use exclusion patterns - Monitor system resources</p>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/#invalid-configuration","title":"Invalid Configuration","text":"<p>Problem: Configuration syntax errors</p> <p>Solution: Validate TOML syntax in <code>pyproject.toml</code></p>"},{"location":"troubleshooting/#exclusions-not-working","title":"Exclusions Not Working","text":"<p>Common issues: - Wrong glob pattern syntax - Patterns too broad/narrow - Path separator issues</p> <p>Testing patterns: <pre><code>python -c \"import fnmatch; print(fnmatch.fnmatch('file.py', '*.py'))\"\n</code></pre></p>"},{"location":"troubleshooting/#pre-commit-issues","title":"Pre-commit Issues","text":""},{"location":"troubleshooting/#hook-fails","title":"Hook Fails","text":"<p>Common causes: 1. Wrong version in config 2. Configuration errors 3. File permission issues</p> <p>Solutions: <pre><code>pre-commit autoupdate\npre-commit run --all-files --verbose\n</code></pre></p>"},{"location":"troubleshooting/#slow-hook-execution","title":"Slow Hook Execution","text":"<p>Solutions: - Reduce worker count - Add file filters - Use cached environments</p>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<ol> <li>Check documentation</li> <li>Search GitHub issues</li> <li>Create new issue with details</li> <li>Join discussions</li> </ol> <p>Include in bug reports: - OS and Python version - Command used - Error messages - Sample files (if relevant)</p>"},{"location":"advanced/ci-integration/","title":"CI/CD Integration","text":"<p>Integrating path-comment-hook with CI/CD systems.</p>"},{"location":"advanced/ci-integration/#github-actions","title":"GitHub Actions","text":"<pre><code>- name: Check headers\n  run: path-comment-hook --check --all\n</code></pre>"},{"location":"advanced/ci-integration/#gitlab-ci","title":"GitLab CI","text":"<pre><code>check-headers:\n  script:\n    - path-comment-hook --check --all\n</code></pre>"},{"location":"advanced/ci-integration/#pre-commit-in-ci","title":"Pre-commit in CI","text":"<pre><code>- name: Pre-commit\n  uses: pre-commit/action@v3.0.0\n</code></pre>"},{"location":"advanced/custom-formats/","title":"Custom Formats","text":"<p>Future feature for customizing path header formats.</p>"},{"location":"advanced/custom-formats/#current-format","title":"Current Format","text":"<pre><code># path/to/file.py\n</code></pre>"},{"location":"advanced/custom-formats/#planned-features","title":"Planned Features","text":"<ul> <li>Custom templates</li> <li>Variable substitution</li> <li>Per-file-type formats</li> </ul>"},{"location":"advanced/monorepos/","title":"Monorepos","text":"<p>Best practices for monorepo usage.</p>"},{"location":"advanced/monorepos/#configuration","title":"Configuration","text":"<ul> <li>Multiple pyproject.toml files</li> <li>Directory-specific exclusions</li> <li>Service-specific rules</li> </ul>"},{"location":"advanced/monorepos/#examples","title":"Examples","text":"<p>See Examples for monorepo configurations.</p>"},{"location":"advanced/performance/","title":"Performance","text":"<p>Optimizing path-comment-hook for large projects.</p>"},{"location":"advanced/performance/#parallel-processing","title":"Parallel Processing","text":"<ul> <li>Default: CPU core count</li> <li>Customize with <code>--workers</code></li> </ul>"},{"location":"advanced/performance/#exclusion-patterns","title":"Exclusion Patterns","text":"<ul> <li>Use specific patterns</li> <li>Avoid broad wildcards</li> </ul>"},{"location":"advanced/performance/#large-projects","title":"Large Projects","text":"<ul> <li>Process directories separately</li> <li>Use progress monitoring</li> </ul>"},{"location":"api/reference/","title":"API Reference","text":"<p>This page provides comprehensive API documentation for path-comment-hook. The documentation is automatically generated from the source code docstrings.</p>"},{"location":"api/reference/#modules-overview","title":"Modules Overview","text":"<p>The path-comment-hook package consists of several modules:</p>"},{"location":"api/reference/#cli-module-path_commentcli","title":"CLI Module (<code>path_comment.cli</code>)","text":"<p>The command-line interface implementation using Typer.</p>"},{"location":"api/reference/#configuration-module-path_commentconfig","title":"Configuration Module (<code>path_comment.config</code>)","text":"<p>Configuration loading and validation from <code>pyproject.toml</code>.</p>"},{"location":"api/reference/#detectors-module-path_commentdetectors","title":"Detectors Module (<code>path_comment.detectors</code>)","text":"<p>File type detection and comment prefix mapping.</p>"},{"location":"api/reference/#file-handler-module-path_commentfile_handler","title":"File Handler Module (<code>path_comment.file_handler</code>)","text":"<p>Safe file operations with encoding detection and atomic writes.</p>"},{"location":"api/reference/#injector-module-path_commentinjector","title":"Injector Module (<code>path_comment.injector</code>)","text":"<p>Core logic for adding and removing path headers.</p>"},{"location":"api/reference/#processor-module-path_commentprocessor","title":"Processor Module (<code>path_comment.processor</code>)","text":"<p>Parallel processing and statistics collection.</p> <p>API Documentation</p> <p>Detailed API documentation will be available when mkdocstrings is properly configured. For now, please refer to the source code docstrings.</p>"},{"location":"api/reference/#usage-examples","title":"Usage Examples","text":""},{"location":"api/reference/#programmatic-usage","title":"Programmatic Usage","text":"<p>You can use path-comment-hook programmatically in your Python code:</p> <pre><code>from path_comment.config import load_config\nfrom path_comment.processor import process_files_parallel\nfrom pathlib import Path\n\n# Load configuration\nconfig = load_config()\n\n# Process files\nfiles = [Path(\"src/main.py\"), Path(\"src/utils.py\")]\nproject_root = Path(\".\")\n\nresults = process_files_parallel(\n    files=files,\n    project_root=project_root,\n    mode=\"fix\",\n    workers=4\n)\n\n# Check results\nfor result in results:\n    print(f\"{result.file_path}: {result.result.name}\")\n</code></pre>"},{"location":"api/reference/#custom-file-processing","title":"Custom File Processing","text":"<pre><code>from path_comment.injector import ensure_header, delete_header\nfrom path_comment.detectors import comment_prefix\nfrom pathlib import Path\n\nfile_path = Path(\"src/example.py\")\nproject_root = Path(\".\")\n\n# Check if file supports headers\nprefix = comment_prefix(file_path)\nif prefix:\n    # Add header\n    result = ensure_header(file_path, project_root, mode=\"fix\")\n    print(f\"Result: {result.name}\")\n</code></pre>"},{"location":"api/reference/#configuration-management","title":"Configuration Management","text":"<pre><code>from path_comment.config import Config, load_config\n\n# Load default configuration\nconfig = load_config()\n\n# Create custom configuration\ncustom_config = Config(\n    exclude_globs=[\n        \"*.md\",\n        \"tests/**\",\n        \"docs/**\"\n    ]\n)\n\n# Check if file should be excluded\nfile_path = Path(\"README.md\")\nshould_exclude = custom_config.should_exclude_file(file_path)\nprint(f\"Exclude {file_path}: {should_exclude}\")\n</code></pre>"},{"location":"api/reference/#error-handling","title":"Error Handling","text":"<pre><code>from path_comment.processor import ProcessingError\nfrom path_comment.file_handler import FileHandlingError\n\ntry:\n    results = process_files_parallel(files, project_root)\nexcept ProcessingError as e:\n    print(f\"Processing failed: {e}\")\nexcept FileHandlingError as e:\n    print(f\"File handling error: {e}\")\n</code></pre>"},{"location":"api/reference/#type-definitions","title":"Type Definitions","text":""},{"location":"api/reference/#result-enum","title":"Result Enum","text":"<p>Processing results from the injector module:</p> <ul> <li><code>Result.OK</code>: File already has correct header</li> <li><code>Result.CHANGED</code>: Header was added or modified</li> <li><code>Result.SKIPPED</code>: File was skipped (binary, unsupported, etc.)</li> <li><code>Result.REMOVED</code>: Header was removed (delete operation)</li> </ul>"},{"location":"api/reference/#processingresult","title":"ProcessingResult","text":"<p>Data class containing processing outcome:</p> <pre><code>@dataclass\nclass ProcessingResult:\n    file_path: Path\n    result: Result\n    error: Exception | None = None\n</code></pre>"},{"location":"api/reference/#lineending","title":"LineEnding","text":"<p>Enum for line ending types:</p> <ul> <li><code>LineEnding.LF</code>: Unix-style line endings (<code>\\n</code>)</li> <li><code>LineEnding.CRLF</code>: Windows-style line endings (<code>\\r\\n</code>)</li> </ul>"},{"location":"api/reference/#fileinfo","title":"FileInfo","text":"<p>Information about a file's content and metadata:</p> <pre><code>@dataclass\nclass FileInfo:\n    content: str\n    encoding: str\n    line_ending: LineEnding\n</code></pre>"},{"location":"api/reference/#extension-points","title":"Extension Points","text":""},{"location":"api/reference/#custom-comment-prefixes","title":"Custom Comment Prefixes","text":"<p>You can extend the supported file types by modifying the <code>COMMENT_PREFIXES</code> mapping in the detectors module:</p> <pre><code>from path_comment.detectors import COMMENT_PREFIXES\n\n# Add support for a new file type\nCOMMENT_PREFIXES[\"rust\"] = \"//\"\nCOMMENT_PREFIXES[\"go\"] = \"//\"\n</code></pre>"},{"location":"api/reference/#custom-file-handlers","title":"Custom File Handlers","text":"<p>Implement custom file processing logic:</p> <pre><code>from path_comment.file_handler import FileHandler\nfrom path_comment.injector import Result\n\nclass CustomFileHandler(FileHandler):\n    def custom_process(self, content: str) -&gt; tuple[str, Result]:\n        # Your custom processing logic\n        return modified_content, Result.CHANGED\n</code></pre>"},{"location":"api/reference/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/reference/#parallel-processing","title":"Parallel Processing","text":"<p>The processor module uses <code>ThreadPoolExecutor</code> for parallel file processing:</p> <ul> <li>Default worker count: <code>os.cpu_count()</code></li> <li>Can be customized via <code>workers</code> parameter</li> <li>Progress reporting available via <code>show_progress</code> parameter</li> </ul>"},{"location":"api/reference/#memory-usage","title":"Memory Usage","text":"<p>For large files:</p> <ul> <li>File content is loaded entirely into memory</li> <li>Consider processing in batches for very large projects</li> <li>Use exclusion patterns to skip unnecessary files</li> </ul>"},{"location":"api/reference/#file-system-operations","title":"File System Operations","text":"<ul> <li>Atomic writes prevent data loss</li> <li>Original file permissions are preserved</li> <li>Temporary files are cleaned up automatically</li> </ul>"},{"location":"api/reference/#contributing-to-the-api","title":"Contributing to the API","text":"<p>When contributing new functionality:</p> <ol> <li>Add docstrings: All public functions and classes need docstrings</li> <li>Include type hints: Use proper type annotations</li> <li>Handle errors: Raise appropriate exceptions with clear messages</li> <li>Add tests: Include unit tests for new functionality</li> <li>Update docs: Regenerate API docs after changes</li> </ol>"},{"location":"api/reference/#see-also","title":"See Also","text":"<ul> <li>CLI Usage - Command-line interface</li> <li>Configuration - Configuration options</li> <li>Contributing - Development guide</li> </ul>"},{"location":"contributing/architecture/","title":"Architecture","text":"<p>Technical architecture and design decisions.</p>"},{"location":"contributing/architecture/#core-components","title":"Core Components","text":"<ul> <li>CLI interface</li> <li>File detection</li> <li>Header injection</li> <li>Parallel processing</li> </ul>"},{"location":"contributing/architecture/#design-principles","title":"Design Principles","text":"<ul> <li>Minimal dependencies</li> <li>Fast performance</li> <li>Safe file operations</li> </ul>"},{"location":"contributing/development/","title":"Development Guide","text":"<p>Guide for setting up a development environment and contributing to path-comment-hook.</p>"},{"location":"contributing/development/#development-setup","title":"Development Setup","text":""},{"location":"contributing/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Poetry</li> <li>Git</li> </ul>"},{"location":"contributing/development/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/Shorzinator/path-comment-hook.git\ncd path-comment-hook\npoetry install\n</code></pre>"},{"location":"contributing/development/#running-tests","title":"Running Tests","text":"<pre><code>make test\nmake test-cov  # With coverage\n</code></pre>"},{"location":"contributing/development/#code-quality","title":"Code Quality","text":"<pre><code>make lint      # Run linting\nmake format    # Format code\n</code></pre>"},{"location":"contributing/development/#project-structure","title":"Project Structure","text":"<pre><code>path-comment-hook/\n\u251c\u2500\u2500 src/path_comment/    # Main package\n\u251c\u2500\u2500 tests/              # Test suite\n\u251c\u2500\u2500 docs/               # Documentation\n\u251c\u2500\u2500 examples/           # Usage examples\n\u2514\u2500\u2500 scripts/            # Development scripts\n</code></pre>"},{"location":"contributing/development/#contributing-guidelines","title":"Contributing Guidelines","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make changes with tests</li> <li>Run quality checks</li> <li>Submit pull request</li> </ol>"},{"location":"contributing/development/#code-standards","title":"Code Standards","text":"<ul> <li>Type hints required</li> <li>90%+ test coverage</li> <li>Google-style docstrings</li> <li>Ruff formatting</li> </ul>"},{"location":"contributing/development/#release-process","title":"Release Process","text":"<ol> <li>Update version</li> <li>Update changelog</li> <li>Create release PR</li> <li>Tag and publish</li> </ol>"},{"location":"contributing/testing/","title":"Testing Guide","text":"<p>How to run and write tests for path-comment-hook.</p>"},{"location":"contributing/testing/#running-tests","title":"Running Tests","text":"<pre><code>make test\n</code></pre>"},{"location":"contributing/testing/#test-structure","title":"Test Structure","text":"<ul> <li>Unit tests in <code>tests/</code></li> <li>Integration tests</li> <li>Performance tests</li> </ul>"},{"location":"contributing/testing/#writing-tests","title":"Writing Tests","text":"<ul> <li>Use pytest</li> <li>Include type hints</li> <li>Test edge cases</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>path-comment-hook can be installed in several ways depending on your preferred Python package manager and use case.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>Works on Linux, macOS, and Windows</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#pip-recommended","title":"pip (Recommended)","text":"<p>The simplest way to install path-comment-hook:</p> <pre><code>pip install path-comment-hook\n</code></pre> <p>This installs the tool globally and makes the <code>path-comment-hook</code> command available in your terminal.</p>"},{"location":"getting-started/installation/#pipx-isolated-installation","title":"pipx (Isolated Installation)","text":"<p>For an isolated installation that won't interfere with other Python packages:</p> <pre><code># Install pipx if you don't have it\npip install pipx\n\n# Install path-comment-hook with pipx\npipx install path-comment-hook\n</code></pre> <p>Why pipx?</p> <p>pipx installs Python applications in isolated environments, preventing dependency conflicts while keeping the command globally available.</p>"},{"location":"getting-started/installation/#poetry-development-projects","title":"Poetry (Development Projects)","text":"<p>For projects using Poetry, add as a development dependency:</p> <pre><code># Add to dev dependencies\npoetry add --group dev path-comment-hook\n\n# Or if using older Poetry versions\npoetry add --dev path-comment-hook\n</code></pre> <p>Then run with:</p> <pre><code>poetry run path-comment-hook --help\n</code></pre>"},{"location":"getting-started/installation/#from-source-development","title":"From Source (Development)","text":"<p>To install the latest development version:</p> <pre><code># Clone the repository\ngit clone https://github.com/Shorzinator/path-comment-hook.git\ncd path-comment-hook\n\n# Install with pip\npip install -e .\n\n# Or with Poetry\npoetry install\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify it's working:</p> <pre><code>path-comment-hook --version\n</code></pre> <p>You should see output like:</p> <pre><code>path-comment-hook 0.3.0\n</code></pre>"},{"location":"getting-started/installation/#pre-commit-installation","title":"Pre-commit Installation","text":"<p>Most users will want to use path-comment-hook as a pre-commit hook. This doesn't require installing the package directly:</p> <pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0  # Use the latest version\n    hooks:\n      - id: path-comment\n</code></pre> <p>Then install the hook:</p> <pre><code>pre-commit install\n</code></pre> <p>Pre-commit vs Direct Installation</p> <p>When using pre-commit, the tool is automatically installed in an isolated environment. You don't need to install it separately unless you want to use it directly from the command line.</p>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#macos","title":"macOS","text":"<p>If you're using Homebrew's Python:</p> <pre><code># Use pip3 if pip points to Python 2\npip3 install path-comment-hook\n</code></pre>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<p>On Windows, you might need to use:</p> <pre><code># Command Prompt\npython -m pip install path-comment-hook\n\n# PowerShell\npy -m pip install path-comment-hook\n</code></pre>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<p>Most Linux distributions work with the standard pip installation. For Ubuntu/Debian:</p> <pre><code># Install pip if not available\nsudo apt update\nsudo apt install python3-pip\n\n# Install path-comment-hook\npip3 install path-comment-hook\n</code></pre>"},{"location":"getting-started/installation/#docker","title":"Docker","text":"<p>You can also use path-comment-hook in a Docker container:</p> <pre><code>FROM python:3.11-slim\n\nRUN pip install path-comment-hook\n\n# Your application code here\nCOPY . /app\nWORKDIR /app\n\n# Run path-comment-hook\nRUN path-comment-hook --all\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#command-not-found","title":"Command Not Found","text":"<p>If you get \"command not found\" after installation:</p> <ol> <li>Check PATH: Make sure Python's scripts directory is in your PATH</li> <li>Use full path: Try <code>python -m path_comment</code> instead</li> <li>Virtual environment: Activate your virtual environment if you installed there</li> </ol>"},{"location":"getting-started/installation/#permission-errors","title":"Permission Errors","text":"<p>On Unix systems, if you get permission errors:</p> <pre><code># Install for current user only\npip install --user path-comment-hook\n\n# Or use sudo (not recommended)\nsudo pip install path-comment-hook\n</code></pre>"},{"location":"getting-started/installation/#version-conflicts","title":"Version Conflicts","text":"<p>If you have dependency conflicts:</p> <pre><code># Use pipx for isolated installation\npipx install path-comment-hook\n\n# Or create a virtual environment\npython -m venv venv\nsource venv/bin/activate  # Windows: venv\\Scripts\\activate\npip install path-comment-hook\n</code></pre>"},{"location":"getting-started/installation/#whats-next","title":"What's Next?","text":"<p>Now that you have path-comment-hook installed:</p> <ul> <li>Quick Start - Run your first path comment operation</li> <li>Pre-commit Setup - Integrate with your workflow</li> <li>Configuration - Customize for your project</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get path-comment-hook up and running in 5 minutes. This guide will walk you through adding path headers to your first project.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>A Git repository with source code files</li> </ul>"},{"location":"getting-started/quick-start/#step-1-install-path-comment-hook","title":"Step 1: Install path-comment-hook","text":"<p>Choose your preferred installation method:</p> pippipxPoetry <pre><code>pip install path-comment-hook\n</code></pre> <pre><code>pipx install path-comment-hook\n</code></pre> <pre><code>poetry add --group dev path-comment-hook\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-test-the-installation","title":"Step 2: Test the Installation","text":"<p>Verify the installation worked:</p> <pre><code>path-comment-hook --version\n</code></pre> <p>You should see version information displayed.</p>"},{"location":"getting-started/quick-start/#step-3-try-it-out","title":"Step 3: Try It Out","text":"<p>Let's add path headers to a sample file:</p> <ol> <li> <p>Create a test file:    <pre><code>mkdir -p src/utils\ncat &gt; src/utils/helper.py &lt;&lt; 'EOF'\ndef greet(name):\n    return f\"Hello, {name}!\"\n\ndef add_numbers(a, b):\n    return a + b\nEOF\n</code></pre></p> </li> <li> <p>Run path-comment-hook:    <pre><code>path-comment-hook src/utils/helper.py\n</code></pre></p> </li> <li> <p>Check the result:    <pre><code>cat src/utils/helper.py\n</code></pre></p> </li> </ol> <p>You should see:    <pre><code># src/utils/helper.py\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\ndef add_numbers(a, b):\n    return a + b\n</code></pre></p> <p>Success! The path header has been added to your file.</p>"},{"location":"getting-started/quick-start/#step-4-process-multiple-files","title":"Step 4: Process Multiple Files","text":"<p>Process all Python files in your project:</p> <pre><code># Process all files in src/ directory\npath-comment-hook --all src/\n\n# Or process your entire project\npath-comment-hook --all\n</code></pre> <p>Dry Run First</p> <p>Use <code>--check</code> mode to see what would be changed without modifying files: <pre><code>path-comment-hook --check --all\n</code></pre></p>"},{"location":"getting-started/quick-start/#step-5-set-up-pre-commit-recommended","title":"Step 5: Set Up Pre-commit (Recommended)","text":"<p>For automatic path header management, set up pre-commit:</p> <ol> <li> <p>Install pre-commit (if not already installed):    <pre><code>pip install pre-commit\n</code></pre></p> </li> <li> <p>Create <code>.pre-commit-config.yaml</code> in your project root:    <pre><code>repos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0  # Use the latest version\n    hooks:\n      - id: path-comment\n</code></pre></p> </li> <li> <p>Install the hook:    <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Test it:    <pre><code># Run on all files\npre-commit run path-comment --all-files\n\n# Or make a commit to trigger automatically\ngit add .\ngit commit -m \"Add path-comment-hook\"\n</code></pre></p> </li> </ol>"},{"location":"getting-started/quick-start/#common-use-cases","title":"Common Use Cases","text":""},{"location":"getting-started/quick-start/#add-headers-to-existing-project","title":"Add Headers to Existing Project","text":"<pre><code># Check what would be changed\npath-comment-hook --check --all\n\n# Apply changes\npath-comment-hook --all\n\n# Commit the changes\ngit add .\ngit commit -m \"Add file path headers\"\n</code></pre>"},{"location":"getting-started/quick-start/#remove-headers","title":"Remove Headers","text":"<pre><code># Remove all path headers\npath-comment-hook --delete --all\n\n# Or check what would be removed first\npath-comment-hook --delete --check --all\n</code></pre>"},{"location":"getting-started/quick-start/#process-specific-file-types","title":"Process Specific File Types","text":"<pre><code># Only Python files\nfind . -name \"*.py\" -exec path-comment-hook {} +\n\n# Multiple file types\npath-comment-hook src/**/*.py src/**/*.js\n</code></pre>"},{"location":"getting-started/quick-start/#understanding-the-output","title":"Understanding the Output","text":"<p>When you run path-comment-hook, you'll see output like:</p> <pre><code>Processing files...\n\u2713 src/utils/helper.py - CHANGED\n\u2713 src/main.py - OK (already has header)\n\u26a0 binary_file.so - SKIPPED\n</code></pre> <ul> <li>CHANGED: Header was added or updated</li> <li>OK: File already has the correct header</li> <li>SKIPPED: File was skipped (binary, unsupported type, etc.)</li> </ul>"},{"location":"getting-started/quick-start/#configuration-optional","title":"Configuration (Optional)","text":"<p>Create a <code>pyproject.toml</code> configuration for custom behavior:</p> <pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"tests/fixtures/*\",\n    \"docs/*\"\n]\n</code></pre> <p>See the Configuration Guide for all options.</p>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#files-not-being-processed","title":"Files Not Being Processed","text":"<ul> <li>Check if the file type is supported: Supported File Types</li> <li>Verify the file isn't excluded by default patterns</li> <li>Use <code>--verbose</code> for detailed output</li> </ul>"},{"location":"getting-started/quick-start/#headers-look-wrong","title":"Headers Look Wrong","text":"<ul> <li>Check your configuration in <code>pyproject.toml</code></li> <li>See Configuration Guide for customization</li> </ul>"},{"location":"getting-started/quick-start/#pre-commit-issues","title":"Pre-commit Issues","text":"<ul> <li>Make sure you have the latest version in <code>.pre-commit-config.yaml</code></li> <li>Run <code>pre-commit autoupdate</code> to update hooks</li> <li>Use <code>pre-commit run --all-files</code> to test</li> </ul>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<p>Now that you have the basics working:</p> <ul> <li>CLI Usage - Learn all command-line options</li> <li>Pre-commit Setup - Advanced pre-commit configuration</li> <li>Configuration - Customize for your project</li> <li>File Types - See all supported languages</li> </ul>"},{"location":"getting-started/quick-start/#example-project","title":"Example Project","text":"<p>Here's what a typical project looks like after running path-comment-hook:</p> <pre><code>my-project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.py              # src/main.py\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 helpers.py       # src/utils/helpers.py\n\u2502   \u2502   \u2514\u2500\u2500 constants.py     # src/utils/constants.py\n\u2502   \u2514\u2500\u2500 api/\n\u2502       \u251c\u2500\u2500 routes.py        # src/api/routes.py\n\u2502       \u2514\u2500\u2500 models.py        # src/api/models.py\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test_main.py         # tests/test_main.py\n    \u2514\u2500\u2500 test_utils.py        # tests/test_utils.py\n</code></pre> <p>Each file now has a clear path header making navigation effortless!</p>"},{"location":"getting-started/quick-start/#need-help","title":"Need Help?","text":"<ul> <li>Troubleshooting Guide</li> <li>FAQ</li> <li>GitHub Issues</li> </ul>"},{"location":"getting-started/why-path-headers/","title":"Why Path Headers?","text":"<p>Ever found yourself staring at a code snippet and wondering \"Where is this file in my project?\" Path headers solve this common problem by adding a simple comment at the top of each source file showing its relative path.</p>"},{"location":"getting-started/why-path-headers/#the-problem","title":"The Problem","text":"<p>Modern development involves navigating large codebases with hundreds or thousands of files. Common frustrations include:</p>"},{"location":"getting-started/why-path-headers/#lost-in-context","title":"Lost in Context","text":"<pre><code># You see this code in an IDE, editor, or code review...\ndef process_payment(amount, method):\n    if method == \"credit_card\":\n        return validate_credit_card(amount)\n    return process_cash(amount)\n</code></pre> <p>Questions that arise: - Where is this file located? - Is this part of the payment module or billing module? - How does this relate to other payment processing code?</p>"},{"location":"getting-started/why-path-headers/#tool-limitations","title":"Tool Limitations","text":"<ul> <li>Code reviews: GitHub/GitLab show snippets without full context</li> <li>Search results: grep/ripgrep results lack file organization info</li> <li>Documentation: Code examples missing location context</li> <li>Debugging: Stack traces are clearer with path context</li> <li>Team collaboration: New team members get lost in large codebases</li> </ul>"},{"location":"getting-started/why-path-headers/#the-solution-path-headers","title":"The Solution: Path Headers","text":"<p>With path-comment-hook, the same code becomes:</p> <pre><code># src/payment/processors.py\n\ndef process_payment(amount, method):\n    if method == \"credit_card\":\n        return validate_credit_card(amount)\n    return process_cash(amount)\n</code></pre> <p>Now you instantly know: - \u2705 This is payment processing logic - \u2705 It's in the <code>src/payment/</code> module - \u2705 The file is <code>processors.py</code> - \u2705 Easy to locate in your IDE or filesystem</p>"},{"location":"getting-started/why-path-headers/#real-world-benefits","title":"Real-World Benefits","text":""},{"location":"getting-started/why-path-headers/#1-faster-code-navigation","title":"1. Faster Code Navigation","text":"<p>Without path headers: <pre><code># Hmm, where is this UserManager class?\nclass UserManager:\n    def create_user(self, email, password):\n        # Implementation here\n</code></pre></p> <p>With path headers: <pre><code># src/auth/managers.py\n\nclass UserManager:\n    def create_user(self, email, password):\n        # Implementation here\n</code></pre></p> <p>Instantly know it's in <code>src/auth/managers.py</code>!</p>"},{"location":"getting-started/why-path-headers/#2-better-code-reviews","title":"2. Better Code Reviews","text":"<p>GitHub/GitLab code reviews become more productive:</p> BeforeAfter <pre><code>def validate_email(email: str) -&gt; bool:\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None\n</code></pre> <p>Reviewers ask: \"Where is this function? Is it a utility or part of user validation?\"</p> <pre><code># src/utils/validators.py\n\ndef validate_email(email: str) -&gt; bool:\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None\n</code></pre> <p>Reviewers immediately understand: \"Ah, this is a utility function for validation.\"</p>"},{"location":"getting-started/why-path-headers/#3-improved-debugging","title":"3. Improved Debugging","text":"<p>Stack traces become more meaningful:</p> <pre><code># src/api/endpoints.py\n\n@app.route('/users/&lt;user_id&gt;')\ndef get_user(user_id):\n    user = UserService.get_by_id(user_id)  # Error occurs here\n    return jsonify(user.to_dict())\n</code></pre> <p>When an error occurs, you immediately know the failing code is in <code>src/api/endpoints.py</code>.</p>"},{"location":"getting-started/why-path-headers/#4-better-documentation","title":"4. Better Documentation","text":"<p>Code examples in documentation are clearer:</p> Without ContextWith Context <pre><code># How do I use this configuration class?\nconfig = AppConfig()\nconfig.load_from_file('settings.json')\n</code></pre> <pre><code># src/config/app_config.py\n\n# Clear that this is the main config module\nconfig = AppConfig()\nconfig.load_from_file('settings.json')\n</code></pre>"},{"location":"getting-started/why-path-headers/#5-team-onboarding","title":"5. Team Onboarding","text":"<p>New developers can: - Understand code organization faster - Find related files more easily - Navigate unfamiliar codebases with confidence - Contribute sooner with less confusion</p>"},{"location":"getting-started/why-path-headers/#industry-examples","title":"Industry Examples","text":"<p>Many successful projects use similar approaches:</p>"},{"location":"getting-started/why-path-headers/#linux-kernel","title":"Linux Kernel","text":"<pre><code>/* arch/x86/kernel/setup.c */\n\nvoid __init setup_arch(char **cmdline_p)\n{\n    // Implementation\n}\n</code></pre>"},{"location":"getting-started/why-path-headers/#python-standard-library","title":"Python Standard Library","text":"<pre><code># Lib/urllib/request.py\n\ndef urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n            *, cafile=None, capath=None, cadefault=False, context=None):\n    # Implementation\n</code></pre>"},{"location":"getting-started/why-path-headers/#popular-open-source-projects","title":"Popular Open Source Projects","text":"<p>Many projects manually add path comments because they're so valuable for code navigation.</p>"},{"location":"getting-started/why-path-headers/#performance-impact","title":"Performance Impact","text":"<p>Minimal overhead: - File size increase: ~0.1% (one line per file) - Build time impact: Negligible - Runtime impact: None (comments are ignored) - Git history: Clean, focused commits</p>"},{"location":"getting-started/why-path-headers/#when-path-headers-shine","title":"When Path Headers Shine","text":""},{"location":"getting-started/why-path-headers/#large-codebases","title":"Large Codebases","text":"<ul> <li>Microservices: Multiple services with similar file names</li> <li>Monorepos: Hundreds of packages and modules</li> <li>Enterprise applications: Complex directory structures</li> </ul>"},{"location":"getting-started/why-path-headers/#code-reviews","title":"Code Reviews","text":"<ul> <li>Pull requests: Reviewers understand context immediately</li> <li>Pair programming: Shared screen sessions are clearer</li> <li>Code walkthroughs: Presentations and demos benefit</li> </ul>"},{"location":"getting-started/why-path-headers/#documentation","title":"Documentation","text":"<ul> <li>README examples: Show exactly where code lives</li> <li>Blog posts: Code snippets have clear source</li> <li>API documentation: Implementation examples with context</li> </ul>"},{"location":"getting-started/why-path-headers/#development-tools","title":"Development Tools","text":"<ul> <li>Search results: grep/ripgrep output includes context</li> <li>Log messages: Debug output shows file origins</li> <li>Error reporting: Stack traces are more informative</li> </ul>"},{"location":"getting-started/why-path-headers/#addressing-common-concerns","title":"Addressing Common Concerns","text":""},{"location":"getting-started/why-path-headers/#dont-filenames-show-the-path-already","title":"\"Don't filenames show the path already?\"","text":"<p>Not always: - Multiple files with same name (<code>models.py</code>, <code>utils.py</code>, <code>config.py</code>) - Code snippets shared out of context - Search results from multiple directories - Refactored code where files moved</p>"},{"location":"getting-started/why-path-headers/#ides-already-show-file-paths","title":"\"IDEs already show file paths\"","text":"<p>True, but: - Code reviews don't have IDE context - Shared code snippets lose context - Documentation and examples need clarity - Terminal-based development benefits</p>"},{"location":"getting-started/why-path-headers/#this-clutters-my-code","title":"\"This clutters my code\"","text":"<p>Actually: - One line per file (minimal visual impact) - Provides valuable context that outweighs the cost - Can be easily removed if needed (<code>--delete</code> flag) - Many developers find it helpful rather than cluttering</p>"},{"location":"getting-started/why-path-headers/#getting-started","title":"Getting Started","text":"<p>Ready to improve your code navigation? Start with:</p> <ol> <li>Installation - Get path-comment-hook installed</li> <li>Quick Start - Add headers to your first project</li> <li>Pre-commit Setup - Automate the process</li> </ol> <p>Transform your codebase from this:</p> <pre><code>def calculate_tax(amount, rate):\n    return amount * rate\n</code></pre> <p>To this:</p> <pre><code># src/billing/tax_calculator.py\n\ndef calculate_tax(amount, rate):\n    return amount * rate\n</code></pre> <p>Your future self (and your teammates) will thank you!</p>"},{"location":"user-guide/cli-usage/","title":"CLI Usage","text":"<p>path-comment-hook provides a powerful command-line interface for managing file path headers. This guide covers all available commands and options.</p>"},{"location":"user-guide/cli-usage/#basic-syntax","title":"Basic Syntax","text":"<pre><code>path-comment-hook [OPTIONS] [FILES...]\n</code></pre>"},{"location":"user-guide/cli-usage/#core-commands","title":"Core Commands","text":""},{"location":"user-guide/cli-usage/#process-files","title":"Process Files","text":"<p>Add path headers to specific files:</p> <pre><code># Single file\npath-comment-hook src/main.py\n\n# Multiple files\npath-comment-hook src/main.py src/utils.py\n\n# Using wildcards\npath-comment-hook src/**/*.py\n</code></pre>"},{"location":"user-guide/cli-usage/#process-all-files","title":"Process All Files","text":"<p>Process all supported files in the project:</p> <pre><code># Process entire project\npath-comment-hook --all\n\n# Process specific directory\npath-comment-hook --all src/\n\n# Process multiple directories\npath-comment-hook --all src/ tests/\n</code></pre>"},{"location":"user-guide/cli-usage/#check-mode-dry-run","title":"Check Mode (Dry Run)","text":"<p>See what would be changed without modifying files:</p> <pre><code># Check single file\npath-comment-hook --check src/main.py\n\n# Check all files\npath-comment-hook --check --all\n\n# Check with detailed output\npath-comment-hook --check --all --verbose\n</code></pre>"},{"location":"user-guide/cli-usage/#delete-headers","title":"Delete Headers","text":"<p>Remove path headers from files:</p> <pre><code># Remove from specific file\npath-comment-hook --delete src/main.py\n\n# Remove from all files\npath-comment-hook --delete --all\n\n# Check what would be removed\npath-comment-hook --delete --check --all\n</code></pre>"},{"location":"user-guide/cli-usage/#command-options","title":"Command Options","text":""},{"location":"user-guide/cli-usage/#core-options","title":"Core Options","text":"Option Short Description <code>--all</code> <code>-a</code> Process all files in project/directory <code>--check</code> <code>-c</code> Check mode - don't modify files <code>--delete</code> <code>-d</code> Remove path headers instead of adding <code>--verbose</code> <code>-v</code> Show detailed output <code>--quiet</code> <code>-q</code> Suppress all output except errors <code>--version</code> Show version information <code>--help</code> <code>-h</code> Show help message"},{"location":"user-guide/cli-usage/#advanced-options","title":"Advanced Options","text":"Option Description Default <code>--workers N</code> Number of parallel workers CPU count <code>--progress</code> Show progress bar False <code>--config PATH</code> Path to config file <code>pyproject.toml</code>"},{"location":"user-guide/cli-usage/#examples","title":"Examples","text":""},{"location":"user-guide/cli-usage/#basic-usage","title":"Basic Usage","text":"<pre><code># Add headers to Python files\npath-comment-hook src/*.py\n\n# Process entire src directory\npath-comment-hook --all src/\n\n# Check what would change\npath-comment-hook --check --all\n</code></pre>"},{"location":"user-guide/cli-usage/#advanced-usage","title":"Advanced Usage","text":"<pre><code># Process with progress bar and verbose output\npath-comment-hook --all --progress --verbose\n\n# Use specific number of workers\npath-comment-hook --all --workers 4\n\n# Remove headers with confirmation\npath-comment-hook --delete --check --all\npath-comment-hook --delete --all  # If previous looks good\n</code></pre>"},{"location":"user-guide/cli-usage/#configuration","title":"Configuration","text":"<pre><code># Use custom config file\npath-comment-hook --all --config custom.toml\n\n# Show current configuration\npath-comment-hook show-config\n</code></pre>"},{"location":"user-guide/cli-usage/#output-format","title":"Output Format","text":""},{"location":"user-guide/cli-usage/#standard-output","title":"Standard Output","text":"<pre><code>Processing files...\n\u2713 src/main.py - CHANGED\n\u2713 src/utils.py - OK\n\u26a0 binary_file.so - SKIPPED\n\u2717 locked_file.py - ERROR: Permission denied\n</code></pre>"},{"location":"user-guide/cli-usage/#verbose-output","title":"Verbose Output","text":"<pre><code>path-comment-hook v0.3.0\nConfiguration loaded from: pyproject.toml\nProject root: /home/user/my-project\n\nProcessing files with 4 workers...\n\nsrc/main.py:\n  Current header: None\n  Expected header: # src/main.py\n  Action: ADD\n  Result: CHANGED\n\nsrc/utils.py:\n  Current header: # src/utils.py\n  Expected header: # src/utils.py\n  Action: NONE\n  Result: OK\n</code></pre>"},{"location":"user-guide/cli-usage/#quiet-mode","title":"Quiet Mode","text":"<p>In quiet mode (<code>--quiet</code>), only errors are shown:</p> <pre><code>ERROR: Permission denied: locked_file.py\n</code></pre>"},{"location":"user-guide/cli-usage/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success - no changes needed 1 Files were modified (in fix mode) 2 Files need changes (in check mode) 3 Configuration error 4 Runtime error <p>Pre-commit Compatibility</p> <p>Exit code 1 indicates files were changed, which pre-commit uses to re-run hooks after modifications.</p>"},{"location":"user-guide/cli-usage/#working-with-different-file-types","title":"Working with Different File Types","text":""},{"location":"user-guide/cli-usage/#python-files","title":"Python Files","text":"<pre><code># Process all Python files\nfind . -name \"*.py\" -exec path-comment-hook {} +\n\n# Or use built-in discovery\npath-comment-hook --all\n</code></pre>"},{"location":"user-guide/cli-usage/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code># Process JS/TS files\npath-comment-hook src/**/*.{js,ts,jsx,tsx}\n</code></pre>"},{"location":"user-guide/cli-usage/#multiple-languages","title":"Multiple Languages","text":"<pre><code># Process common source files\npath-comment-hook --all  # Automatically detects supported types\n</code></pre>"},{"location":"user-guide/cli-usage/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/cli-usage/#parallel-processing","title":"Parallel Processing","text":"<pre><code># Use all CPU cores (default)\npath-comment-hook --all\n\n# Limit workers for resource-constrained environments\npath-comment-hook --all --workers 2\n\n# Single-threaded processing\npath-comment-hook --all --workers 1\n</code></pre>"},{"location":"user-guide/cli-usage/#large-projects","title":"Large Projects","text":"<pre><code># Show progress for long-running operations\npath-comment-hook --all --progress\n\n# Process specific directories to reduce scope\npath-comment-hook --all src/ --progress\n</code></pre>"},{"location":"user-guide/cli-usage/#integration-examples","title":"Integration Examples","text":""},{"location":"user-guide/cli-usage/#git-hooks","title":"Git Hooks","text":"<pre><code>#!/bin/bash\n# pre-commit hook\npath-comment-hook --all --check\nif [ $? -eq 2 ]; then\n    echo \"Files need path headers. Run: path-comment-hook --all\"\n    exit 1\nfi\n</code></pre>"},{"location":"user-guide/cli-usage/#cicd-pipelines","title":"CI/CD Pipelines","text":"<pre><code># GitHub Actions\n- name: Check path headers\n  run: path-comment-hook --check --all\n</code></pre>"},{"location":"user-guide/cli-usage/#makefile-integration","title":"Makefile Integration","text":"<pre><code>.PHONY: format\nformat:\n    path-comment-hook --all\n\n.PHONY: check-format\ncheck-format:\n    path-comment-hook --check --all\n</code></pre>"},{"location":"user-guide/cli-usage/#configuration-commands","title":"Configuration Commands","text":""},{"location":"user-guide/cli-usage/#show-configuration","title":"Show Configuration","text":"<p>Display current configuration:</p> <pre><code>path-comment-hook show-config\n</code></pre> <p>Output: <pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"*.txt\",\n    \"*.json\",\n    \"*.lock\",\n    \".git/**\",\n    \"__pycache__/**\"\n]\n</code></pre></p>"},{"location":"user-guide/cli-usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/cli-usage/#common-issues","title":"Common Issues","text":"<p>Files not being processed: <pre><code># Check if files are supported\npath-comment-hook --verbose src/unknown_file.xyz\n\n# Check exclusion patterns\npath-comment-hook show-config\n</code></pre></p> <p>Performance issues: <pre><code># Reduce worker count\npath-comment-hook --all --workers 2\n\n# Process smaller batches\npath-comment-hook --all src/\npath-comment-hook --all tests/\n</code></pre></p> <p>Permission errors: <pre><code># Check file permissions\nls -la problematic_file.py\n\n# Use sudo if necessary (not recommended)\nsudo path-comment-hook problematic_file.py\n</code></pre></p>"},{"location":"user-guide/cli-usage/#debug-mode","title":"Debug Mode","text":"<p>For detailed debugging information:</p> <pre><code># Maximum verbosity\npath-comment-hook --verbose --all\n\n# Show configuration details\npath-comment-hook show-config --verbose\n</code></pre>"},{"location":"user-guide/cli-usage/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/cli-usage/#development-workflow","title":"Development Workflow","text":"<pre><code># 1. Check what would change\npath-comment-hook --check --all\n\n# 2. Apply changes\npath-comment-hook --all\n\n# 3. Review changes\ngit diff\n\n# 4. Commit if satisfied\ngit add .\ngit commit -m \"Add path headers\"\n</code></pre>"},{"location":"user-guide/cli-usage/#team-usage","title":"Team Usage","text":"<pre><code># Standardize on specific options\nalias pch=\"path-comment-hook --all --progress\"\n\n# Include in project scripts\necho \"pch\" &gt;&gt; scripts/format.sh\n</code></pre>"},{"location":"user-guide/cli-usage/#pre-commit-integration","title":"Pre-commit Integration","text":"<pre><code># Test before committing\npre-commit run path-comment --all-files\n\n# Install for automatic runs\npre-commit install\n</code></pre>"},{"location":"user-guide/cli-usage/#migration-guide","title":"Migration Guide","text":""},{"location":"user-guide/cli-usage/#from-manual-headers","title":"From Manual Headers","text":"<p>If you have existing manual path headers:</p> <pre><code># Remove existing headers first\npath-comment-hook --delete --all\n\n# Add standardized headers\npath-comment-hook --all\n</code></pre>"},{"location":"user-guide/cli-usage/#changing-format","title":"Changing Format","text":"<p>To change header format, update configuration and reprocess:</p> <pre><code># Update pyproject.toml configuration\n# Then reprocess all files\npath-comment-hook --all\n</code></pre>"},{"location":"user-guide/cli-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Pre-commit Setup - Automate with pre-commit</li> <li>Configuration - Customize behavior</li> <li>File Types - See supported languages</li> <li>Examples - Real-world usage patterns</li> </ul>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>path-comment-hook can be customized through configuration files to match your project's specific needs. This guide covers all available configuration options.</p>"},{"location":"user-guide/configuration/#configuration-file","title":"Configuration File","text":"<p>Configuration is stored in your project's <code>pyproject.toml</code> file under the <code>[tool.path-comment]</code> section:</p> <pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"tests/fixtures/*\",\n    \"docs/*\"\n]\n</code></pre>"},{"location":"user-guide/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"user-guide/configuration/#exclude_globs","title":"exclude_globs","text":"<p>Type: <code>list[str]</code> Default: <code>[\"*.md\", \"*.txt\", \"*.json\", \"*.lock\", \".git/**\", \"__pycache__/**\"]</code></p> <p>Glob patterns for files and directories to exclude from processing.</p> <pre><code>[tool.path-comment]\nexclude_globs = [\n    # Documentation files\n    \"*.md\",\n    \"*.rst\",\n    \"*.txt\",\n\n    # Configuration files\n    \"*.json\",\n    \"*.yml\",\n    \"*.yaml\",\n    \"*.toml\",\n    \"*.ini\",\n\n    # Build artifacts\n    \"*.lock\",\n    \"build/**\",\n    \"dist/**\",\n\n    # Version control\n    \".git/**\",\n    \".svn/**\",\n\n    # Python artifacts\n    \"__pycache__/**\",\n    \"*.egg-info/**\",\n    \".pytest_cache/**\",\n\n    # Test fixtures\n    \"tests/fixtures/**\",\n    \"tests/data/**\",\n\n    # Documentation\n    \"docs/**\",\n    \"site/**\"\n]\n</code></pre>"},{"location":"user-guide/configuration/#supported-patterns","title":"Supported Patterns","text":"<p>The exclude patterns support standard glob syntax:</p> Pattern Matches <code>*.md</code> All Markdown files <code>tests/**</code> Everything in tests directory <code>**/temp/*</code> Files in any temp directory <code>file?.txt</code> file1.txt, file2.txt, etc. <code>[abc].py</code> a.py, b.py, c.py"},{"location":"user-guide/configuration/#examples-by-project-type","title":"Examples by Project Type","text":""},{"location":"user-guide/configuration/#python-library","title":"Python Library","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    # Standard exclusions\n    \"*.md\",\n    \"*.txt\",\n    \"*.json\",\n    \"*.lock\",\n    \".git/**\",\n    \"__pycache__/**\",\n\n    # Python specific\n    \"*.egg-info/**\",\n    \".pytest_cache/**\",\n    \".mypy_cache/**\",\n    \".ruff_cache/**\",\n    \"build/**\",\n    \"dist/**\",\n\n    # Documentation\n    \"docs/**\",\n\n    # Test fixtures\n    \"tests/fixtures/**\"\n]\n</code></pre>"},{"location":"user-guide/configuration/#web-application","title":"Web Application","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    # Standard exclusions\n    \"*.md\",\n    \"*.txt\",\n    \"*.json\",\n    \"*.lock\",\n    \".git/**\",\n    \"__pycache__/**\",\n\n    # Web specific\n    \"static/**\",\n    \"media/**\",\n    \"uploads/**\",\n    \"node_modules/**\",\n    \"*.min.js\",\n    \"*.min.css\",\n\n    # Translations\n    \"locale/**\",\n\n    # Database\n    \"migrations/**\",\n    \"*.db\",\n    \"*.sqlite3\"\n]\n</code></pre>"},{"location":"user-guide/configuration/#data-science-project","title":"Data Science Project","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    # Standard exclusions\n    \"*.md\",\n    \"*.txt\",\n    \"*.json\",\n    \"*.lock\",\n    \".git/**\",\n    \"__pycache__/**\",\n\n    # Data files\n    \"data/**\",\n    \"datasets/**\",\n    \"*.csv\",\n    \"*.parquet\",\n    \"*.h5\",\n    \"*.hdf5\",\n\n    # Notebooks (optional)\n    \"notebooks/**\",\n    \"*.ipynb\",\n\n    # Models\n    \"models/**\",\n    \"*.pkl\",\n    \"*.joblib\",\n\n    # Outputs\n    \"outputs/**\",\n    \"plots/**\",\n    \"figures/**\"\n]\n</code></pre>"},{"location":"user-guide/configuration/#monorepo","title":"Monorepo","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    # Standard exclusions\n    \"*.md\",\n    \"*.txt\",\n    \"*.json\",\n    \"*.lock\",\n    \".git/**\",\n    \"__pycache__/**\",\n\n    # Package specific exclusions\n    \"*/node_modules/**\",\n    \"*/build/**\",\n    \"*/dist/**\",\n    \"*/target/**\",\n\n    # Documentation for all packages\n    \"*/docs/**\",\n\n    # Test fixtures for all packages\n    \"*/tests/fixtures/**\",\n\n    # Specific directories\n    \"infra/**\",\n    \"scripts/**\",\n    \"tools/**\"\n]\n</code></pre>"},{"location":"user-guide/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"user-guide/configuration/#per-directory-config","title":"Per-Directory Config","text":"<p>You can have different configurations for different parts of your project by using multiple <code>pyproject.toml</code> files:</p> <pre><code>project/\n\u251c\u2500\u2500 pyproject.toml          # Main config\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 pyproject.toml      # Source-specific config\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 pyproject.toml      # Test-specific config\n</code></pre>"},{"location":"user-guide/configuration/#environment-specific-config","title":"Environment-Specific Config","text":"<p>Use different configurations based on environment:</p> <pre><code># Development configuration\n[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"*.txt\"\n]\n\n# CI/CD can override with more restrictive patterns\n</code></pre>"},{"location":"user-guide/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>path-comment-hook validates your configuration and will show helpful error messages:</p> <pre><code>$ path-comment-hook --all\nError: Invalid configuration in pyproject.toml\n- exclude_globs must be a list of strings\n- Found: exclude_globs = \"*.md\" (string, not list)\n</code></pre>"},{"location":"user-guide/configuration/#viewing-current-configuration","title":"Viewing Current Configuration","text":"<p>Check your current configuration:</p> <pre><code># Show configuration from default location\npath-comment-hook show-config\n\n# Show configuration from specific file\npath-comment-hook show-config --config custom.toml\n</code></pre> <p>Output: <pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"*.txt\",\n    \"*.json\",\n    \"*.lock\",\n    \".git/**\",\n    \"__pycache__/**\"\n]\n</code></pre></p>"},{"location":"user-guide/configuration/#common-patterns","title":"Common Patterns","text":""},{"location":"user-guide/configuration/#exclude-by-file-extension","title":"Exclude by File Extension","text":"<pre><code>exclude_globs = [\n    \"*.log\",       # Log files\n    \"*.tmp\",       # Temporary files\n    \"*.bak\",       # Backup files\n    \"*.swp\",       # Vim swap files\n    \"*.DS_Store\"   # macOS metadata\n]\n</code></pre>"},{"location":"user-guide/configuration/#exclude-by-directory","title":"Exclude by Directory","text":"<pre><code>exclude_globs = [\n    \"vendor/**\",     # Third-party code\n    \"extern/**\",     # External dependencies\n    \"legacy/**\",     # Legacy code\n    \"archive/**\"     # Archived code\n]\n</code></pre>"},{"location":"user-guide/configuration/#exclude-test-files","title":"Exclude Test Files","text":"<pre><code>exclude_globs = [\n    \"test_*.py\",           # Test files\n    \"*_test.py\",           # Alternative test pattern\n    \"tests/**\",            # Test directory\n    \"spec/**\",             # Spec directory\n    \"**/*_spec.py\"         # Spec files anywhere\n]\n</code></pre>"},{"location":"user-guide/configuration/#exclude-generated-files","title":"Exclude Generated Files","text":"<pre><code>exclude_globs = [\n    \"generated/**\",        # Generated code\n    \"*_pb2.py\",           # Protocol buffer files\n    \"*_pb2_grpc.py\",      # gRPC generated files\n    \"schema.py\",          # Generated schema\n    \"migrations/**\"       # Database migrations\n]\n</code></pre>"},{"location":"user-guide/configuration/#override-configuration","title":"Override Configuration","text":""},{"location":"user-guide/configuration/#command-line-override","title":"Command Line Override","text":"<p>You can specify a different config file:</p> <pre><code>path-comment-hook --config custom.toml --all\n</code></pre>"},{"location":"user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>Set configuration through environment:</p> <pre><code>export PATH_COMMENT_CONFIG=/path/to/config.toml\npath-comment-hook --all\n</code></pre>"},{"location":"user-guide/configuration/#configuration-best-practices","title":"Configuration Best Practices","text":""},{"location":"user-guide/configuration/#start-simple","title":"Start Simple","text":"<p>Begin with minimal configuration:</p> <pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"tests/fixtures/**\"\n]\n</code></pre>"},{"location":"user-guide/configuration/#add-as-needed","title":"Add as Needed","text":"<p>Expand configuration based on your project's needs:</p> <ol> <li>Run path-comment-hook</li> <li>Identify unwanted files being processed</li> <li>Add appropriate exclusion patterns</li> <li>Test with <code>--check</code> mode</li> </ol>"},{"location":"user-guide/configuration/#team-coordination","title":"Team Coordination","text":"<p>Ensure all team members use the same configuration:</p> <ol> <li>Commit configuration: Include <code>pyproject.toml</code> in version control</li> <li>Document changes: Note configuration changes in pull requests</li> <li>Validate in CI: Run <code>path-comment-hook --check --all</code> in CI</li> </ol>"},{"location":"user-guide/configuration/#review-regularly","title":"Review Regularly","text":"<p>Periodically review and update configuration:</p> <ul> <li>Remove patterns for deleted directories</li> <li>Add patterns for new file types</li> <li>Optimize patterns for performance</li> </ul>"},{"location":"user-guide/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/configuration/#files-not-excluded","title":"Files Not Excluded","text":"<p>If files aren't being excluded as expected:</p> <pre><code># Test specific patterns\npath-comment-hook --verbose src/unwanted_file.py\n\n# Show current config\npath-comment-hook show-config\n\n# Test with different config\npath-comment-hook --config test.toml --check --all\n</code></pre>"},{"location":"user-guide/configuration/#performance-issues","title":"Performance Issues","text":"<p>For large projects with many exclusions:</p> <ol> <li>Use specific patterns: <code>src/tests/**</code> instead of <code>**/tests/**</code></li> <li>Order matters: Put most common patterns first</li> <li>Test performance: Use <code>--progress</code> to monitor speed</li> </ol>"},{"location":"user-guide/configuration/#pattern-syntax","title":"Pattern Syntax","text":"<p>Common pattern mistakes:</p> Wrong Right Reason <code>tests/</code> <code>tests/**</code> Need <code>**</code> for directories <code>*.py.bak</code> <code>*.bak</code> Extension should be at end <code>/root/file</code> <code>root/file</code> No leading slash needed"},{"location":"user-guide/configuration/#migration-guide","title":"Migration Guide","text":""},{"location":"user-guide/configuration/#from-previous-versions","title":"From Previous Versions","text":"<p>If upgrading from an older version:</p> <ol> <li>Check new defaults: Review default exclusions</li> <li>Update patterns: Some patterns may have changed</li> <li>Test thoroughly: Run in check mode first</li> </ol>"},{"location":"user-guide/configuration/#from-manual-configuration","title":"From Manual Configuration","text":"<p>If migrating from manual file exclusions:</p> <ol> <li>List current exclusions: Document what you currently skip</li> <li>Convert to patterns: Transform to glob patterns</li> <li>Test coverage: Ensure all files are handled correctly</li> </ol>"},{"location":"user-guide/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>File Types - See what file types are supported</li> <li>CLI Usage - Learn command-line options</li> <li>Examples - See real-world configuration examples</li> <li>Pre-commit Setup - Automate with pre-commit</li> </ul>"},{"location":"user-guide/examples/","title":"Examples","text":"<p>Real-world examples and usage patterns for path-comment-hook in different project types and workflows.</p>"},{"location":"user-guide/examples/#django-web-application","title":"Django Web Application","text":""},{"location":"user-guide/examples/#project-structure","title":"Project Structure","text":"<pre><code>myproject/\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 myproject/\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 wsgi.py\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 users/\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 views.py\n\u2502   \u2502   \u2514\u2500\u2500 serializers.py\n\u2502   \u2514\u2500\u2500 blog/\n\u2502       \u251c\u2500\u2500 models.py\n\u2502       \u251c\u2500\u2500 views.py\n\u2502       \u2514\u2500\u2500 urls.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"user-guide/examples/#configuration","title":"Configuration","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"*.txt\",\n    \"*.json\",\n    \"staticfiles/**\",\n    \"media/**\",\n    \"locale/**\",\n    \"migrations/**\",\n    \"venv/**\",\n    \"node_modules/**\"\n]\n</code></pre>"},{"location":"user-guide/examples/#result","title":"Result","text":"<pre><code># apps/users/models.py\n\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\nclass CustomUser(AbstractUser):\n    email = models.EmailField(unique=True)\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n</code></pre>"},{"location":"user-guide/examples/#fastapi-microservice","title":"FastAPI Microservice","text":""},{"location":"user-guide/examples/#project-structure_1","title":"Project Structure","text":"<pre><code>api/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 routers/\n\u2502   \u251c\u2500\u2500 auth.py\n\u2502   \u251c\u2500\u2500 users.py\n\u2502   \u2514\u2500\u2500 posts.py\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 user.py\n\u2502   \u2514\u2500\u2500 post.py\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 auth_service.py\n\u2502   \u2514\u2500\u2500 user_service.py\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test_auth.py\n    \u2514\u2500\u2500 test_users.py\n</code></pre>"},{"location":"user-guide/examples/#configuration_1","title":"Configuration","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"tests/**\",\n    \"alembic/**\",\n    \"__pycache__/**\",\n    \".pytest_cache/**\"\n]\n</code></pre>"},{"location":"user-guide/examples/#result_1","title":"Result","text":"<pre><code># routers/auth.py\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom fastapi.security import OAuth2PasswordBearer\n\nrouter = APIRouter(prefix=\"/auth\", tags=[\"authentication\"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n@router.post(\"/login\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    # Login logic here\n    pass\n</code></pre>"},{"location":"user-guide/examples/#react-frontend","title":"React Frontend","text":""},{"location":"user-guide/examples/#project-structure_2","title":"Project Structure","text":"<pre><code>frontend/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 Header.js\n\u2502   \u2502   \u251c\u2500\u2500 Footer.js\n\u2502   \u2502   \u2514\u2500\u2500 Button.js\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2502   \u251c\u2500\u2500 Home.js\n\u2502   \u2502   \u2514\u2500\u2500 About.js\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 api.js\n\u2502   \u2502   \u2514\u2500\u2500 helpers.js\n\u2502   \u2514\u2500\u2500 App.js\n\u251c\u2500\u2500 public/\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"user-guide/examples/#configuration_2","title":"Configuration","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"*.json\",\n    \"*.lock\",\n    \"node_modules/**\",\n    \"build/**\",\n    \"public/**\",\n    \"*.test.js\",\n    \"*.spec.js\"\n]\n</code></pre>"},{"location":"user-guide/examples/#result_2","title":"Result","text":"<pre><code>// src/components/Header.js\n\nimport React from 'react';\nimport './Header.css';\n\nexport function Header({ title, user }) {\n    return (\n        &lt;header className=\"app-header\"&gt;\n            &lt;h1&gt;{title}&lt;/h1&gt;\n            {user &amp;&amp; &lt;span&gt;Welcome, {user.name}&lt;/span&gt;}\n        &lt;/header&gt;\n    );\n}\n</code></pre>"},{"location":"user-guide/examples/#data-science-project","title":"Data Science Project","text":""},{"location":"user-guide/examples/#project-structure_3","title":"Project Structure","text":"<pre><code>ml-project/\n\u251c\u2500\u2500 notebooks/\n\u2502   \u251c\u2500\u2500 exploration.ipynb\n\u2502   \u2514\u2500\u2500 modeling.ipynb\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 data/\n\u2502   \u2502   \u251c\u2500\u2500 loader.py\n\u2502   \u2502   \u2514\u2500\u2500 preprocessor.py\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 classifier.py\n\u2502   \u2502   \u2514\u2500\u2500 regressor.py\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 metrics.py\n\u2502       \u2514\u2500\u2500 visualization.py\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 train.py\n\u2502   \u2514\u2500\u2500 evaluate.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"user-guide/examples/#configuration_3","title":"Configuration","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"*.txt\",\n    \"*.json\",\n    \"*.csv\",\n    \"*.parquet\",\n    \"*.pkl\",\n    \"*.joblib\",\n    \"notebooks/**\",\n    \"data/**\",\n    \"models/**\",\n    \"outputs/**\",\n    \".ipynb_checkpoints/**\"\n]\n</code></pre>"},{"location":"user-guide/examples/#result_3","title":"Result","text":"<pre><code># src/models/classifier.py\n\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\n\nclass CustomClassifier:\n    def __init__(self, n_estimators=100, random_state=42):\n        self.model = RandomForestClassifier(\n            n_estimators=n_estimators,\n            random_state=random_state\n        )\n</code></pre>"},{"location":"user-guide/examples/#monorepo-with-multiple-services","title":"Monorepo with Multiple Services","text":""},{"location":"user-guide/examples/#project-structure_4","title":"Project Structure","text":"<pre><code>monorepo/\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 auth-service/\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 auth.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 models.py\n\u2502   \u2502   \u2514\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 user-service/\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 users.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 schemas.py\n\u2502   \u2502   \u2514\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 notification-service/\n\u2502       \u251c\u2500\u2500 src/\n\u2502       \u2514\u2500\u2500 tests/\n\u251c\u2500\u2500 shared/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 database.py\n\u2502   \u2502   \u2514\u2500\u2500 logging.py\n\u2502   \u2514\u2500\u2500 models/\n\u2502       \u2514\u2500\u2500 base.py\n\u2514\u2500\u2500 infra/\n    \u251c\u2500\u2500 docker/\n    \u2514\u2500\u2500 k8s/\n</code></pre>"},{"location":"user-guide/examples/#configuration_4","title":"Configuration","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"*.yml\",\n    \"*.yaml\",\n    \"*.json\",\n    \"*/tests/**\",\n    \"infra/**\",\n    \"*.lock\",\n    \"node_modules/**\",\n    \"__pycache__/**\"\n]\n</code></pre>"},{"location":"user-guide/examples/#result_4","title":"Result","text":"<pre><code># shared/utils/database.py\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nBase = declarative_base()\n\nclass DatabaseConnection:\n    def __init__(self, database_url: str):\n        self.engine = create_engine(database_url)\n        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)\n</code></pre>"},{"location":"user-guide/examples/#cc-project","title":"C/C++ Project","text":""},{"location":"user-guide/examples/#project-structure_5","title":"Project Structure","text":"<pre><code>c-project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.c\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 string_utils.c\n\u2502   \u2502   \u2514\u2500\u2500 memory_utils.c\n\u2502   \u2514\u2500\u2500 include/\n\u2502       \u251c\u2500\u2500 utils.h\n\u2502       \u2514\u2500\u2500 constants.h\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 test_utils.c\n\u2502   \u2514\u2500\u2500 test_main.c\n\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 CMakeLists.txt\n</code></pre>"},{"location":"user-guide/examples/#configuration_5","title":"Configuration","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"*.txt\",\n    \"build/**\",\n    \"cmake-build-*/**\",\n    \"*.o\",\n    \"*.so\",\n    \"*.a\"\n]\n</code></pre>"},{"location":"user-guide/examples/#result_5","title":"Result","text":"<pre><code>// src/utils/string_utils.c\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include \"utils.h\"\n\nchar* string_concat(const char* str1, const char* str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char* result = malloc(len1 + len2 + 1);\n\n    if (result) {\n        strcpy(result, str1);\n        strcat(result, str2);\n    }\n\n    return result;\n}\n</code></pre>"},{"location":"user-guide/examples/#shell-scripts-collection","title":"Shell Scripts Collection","text":""},{"location":"user-guide/examples/#project-structure_6","title":"Project Structure","text":"<pre><code>scripts/\n\u251c\u2500\u2500 deployment/\n\u2502   \u251c\u2500\u2500 deploy.sh\n\u2502   \u2514\u2500\u2500 rollback.sh\n\u251c\u2500\u2500 backup/\n\u2502   \u251c\u2500\u2500 database_backup.sh\n\u2502   \u2514\u2500\u2500 files_backup.sh\n\u251c\u2500\u2500 monitoring/\n\u2502   \u251c\u2500\u2500 health_check.sh\n\u2502   \u2514\u2500\u2500 log_analyzer.sh\n\u2514\u2500\u2500 utils/\n    \u251c\u2500\u2500 setup_env.sh\n    \u2514\u2500\u2500 cleanup.sh\n</code></pre>"},{"location":"user-guide/examples/#configuration_6","title":"Configuration","text":"<pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.md\",\n    \"*.txt\",\n    \"*.log\",\n    \"temp/**\",\n    \"backup_files/**\"\n]\n</code></pre>"},{"location":"user-guide/examples/#result_6","title":"Result","text":"<pre><code># deployment/deploy.sh\n\n#!/bin/bash\nset -euo pipefail\n\n# Deployment script for production environment\n# Usage: ./deploy.sh &lt;version&gt;\n\nVERSION=${1:-latest}\nAPP_NAME=\"myapp\"\nDEPLOY_DIR=\"/opt/${APP_NAME}\"\n\necho \"Deploying ${APP_NAME} version ${VERSION}...\"\n</code></pre>"},{"location":"user-guide/examples/#configuration-files","title":"Configuration Files","text":""},{"location":"user-guide/examples/#project-structure_7","title":"Project Structure","text":"<pre><code>configs/\n\u251c\u2500\u2500 docker/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 nginx/\n\u2502   \u2514\u2500\u2500 nginx.conf\n\u251c\u2500\u2500 ci/\n\u2502   \u251c\u2500\u2500 .github/\n\u2502   \u2502   \u2514\u2500\u2500 workflows/\n\u2502   \u2502       \u251c\u2500\u2500 ci.yml\n\u2502   \u2502       \u2514\u2500\u2500 deploy.yml\n\u2514\u2500\u2500 monitoring/\n    \u251c\u2500\u2500 prometheus.yml\n    \u2514\u2500\u2500 grafana.yml\n</code></pre>"},{"location":"user-guide/examples/#result_7","title":"Result","text":"<pre><code># ci/.github/workflows/ci.yml\n\nname: Continuous Integration\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n</code></pre>"},{"location":"user-guide/examples/#pre-commit-integration-examples","title":"Pre-commit Integration Examples","text":""},{"location":"user-guide/examples/#basic-setup","title":"Basic Setup","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0\n    hooks:\n      - id: path-comment\n</code></pre>"},{"location":"user-guide/examples/#advanced-setup-with-multiple-tools","title":"Advanced Setup with Multiple Tools","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  # Path headers first\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0\n    hooks:\n      - id: path-comment\n        args: [--workers=4]\n\n  # Then formatting\n  - repo: https://github.com/psf/black\n    rev: 23.1.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n\n  # Finally linting\n  - repo: https://github.com/charliermarsh/ruff-pre-commit\n    rev: v0.1.0\n    hooks:\n      - id: ruff\n</code></pre>"},{"location":"user-guide/examples/#file-specific-configuration","title":"File-Specific Configuration","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0\n    hooks:\n      - id: path-comment\n        files: ^src/.*\\.py$  # Only process Python files in src/\n        args: [--progress]\n</code></pre>"},{"location":"user-guide/examples/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"user-guide/examples/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/check-headers.yml\nname: Check Path Headers\n\non: [push, pull_request]\n\njobs:\n  check-headers:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - name: Install path-comment-hook\n        run: pip install path-comment-hook\n      - name: Check path headers\n        run: path-comment-hook --check --all\n</code></pre>"},{"location":"user-guide/examples/#gitlab-ci","title":"GitLab CI","text":"<pre><code># .gitlab-ci.yml\ncheck-path-headers:\n  stage: test\n  image: python:3.11-slim\n  script:\n    - pip install path-comment-hook\n    - path-comment-hook --check --all\n  only:\n    - merge_requests\n    - main\n</code></pre>"},{"location":"user-guide/examples/#makefile-integration","title":"Makefile Integration","text":"<pre><code># Makefile\n\n.PHONY: format check-format\n\nformat:\n    path-comment-hook --all\n    black .\n    isort .\n\ncheck-format:\n    path-comment-hook --check --all\n    black --check .\n    isort --check .\n\npre-commit: check-format\n    pytest\n    mypy .\n</code></pre>"},{"location":"user-guide/examples/#docker-integration","title":"Docker Integration","text":""},{"location":"user-guide/examples/#adding-headers-during-build","title":"Adding Headers During Build","text":"<pre><code># Dockerfile\nFROM python:3.11-slim\n\n# Install path-comment-hook\nRUN pip install path-comment-hook\n\n# Copy source code\nCOPY src/ /app/src/\n\n# Add path headers\nWORKDIR /app\nRUN path-comment-hook --all\n\n# Continue with application setup\nCMD [\"python\", \"src/main.py\"]\n</code></pre>"},{"location":"user-guide/examples/#development-workflow","title":"Development Workflow","text":"<pre><code># Development script\n#!/bin/bash\n\n# Add headers before building\npath-comment-hook --all\n\n# Build and run\ndocker build -t myapp .\ndocker run --rm myapp\n</code></pre>"},{"location":"user-guide/examples/#migration-examples","title":"Migration Examples","text":""},{"location":"user-guide/examples/#from-manual-headers","title":"From Manual Headers","text":"<pre><code># Remove existing manual headers\npath-comment-hook --delete --all\n\n# Add standardized headers\npath-comment-hook --all\n\n# Review changes\ngit diff\n\n# Commit if satisfied\ngit add .\ngit commit -m \"Standardize path headers with path-comment-hook\"\n</code></pre>"},{"location":"user-guide/examples/#team-adoption","title":"Team Adoption","text":"<pre><code># Setup script for new team members\n#!/bin/bash\n\necho \"Setting up path-comment-hook...\"\n\n# Install pre-commit\npip install pre-commit\n\n# Install hooks\npre-commit install\n\n# Run on all files\npath-comment-hook --all\n\necho \"Setup complete! Path headers will be managed automatically.\"\n</code></pre>"},{"location":"user-guide/examples/#troubleshooting-examples","title":"Troubleshooting Examples","text":""},{"location":"user-guide/examples/#debug-file-processing","title":"Debug File Processing","text":"<pre><code># Check why a file isn't processed\npath-comment-hook --verbose problem_file.py\n\n# Check configuration\npath-comment-hook show-config\n\n# Test with different config\npath-comment-hook --config test.toml --check --all\n</code></pre>"},{"location":"user-guide/examples/#performance-optimization","title":"Performance Optimization","text":"<pre><code># For large projects, reduce workers\npath-comment-hook --all --workers 2\n\n# Process specific directories\npath-comment-hook --all src/\npath-comment-hook --all tests/\n\n# Show progress for long operations\npath-comment-hook --all --progress\n</code></pre> <p>These examples show how path-comment-hook adapts to different project types and development workflows, making code navigation easier across diverse environments.</p>"},{"location":"user-guide/file-types/","title":"Supported File Types","text":"<p>path-comment-hook supports multiple programming languages and file types. Each file type uses the appropriate comment syntax for that language.</p>"},{"location":"user-guide/file-types/#supported-languages","title":"Supported Languages","text":""},{"location":"user-guide/file-types/#python","title":"Python","text":"<ul> <li>Extensions: <code>.py</code>, <code>.pyx</code></li> <li>Comment style: <code># path/to/file.py</code></li> <li>Shebang support: \u2705</li> </ul> <pre><code># src/utils/helpers.py\n\ndef helper_function():\n    return \"Hello, World!\"\n</code></pre>"},{"location":"user-guide/file-types/#javascript","title":"JavaScript","text":"<ul> <li>Extensions: <code>.js</code></li> <li>Comment style: <code>// path/to/file.js</code></li> <li>Shebang support: \u2705</li> </ul> <pre><code>// src/frontend/utils.js\n\nfunction formatDate(date) {\n    return date.toISOString();\n}\n</code></pre>"},{"location":"user-guide/file-types/#cc","title":"C/C++","text":"<ul> <li>Extensions: <code>.c</code>, <code>.h</code></li> <li>Comment style: <code>// path/to/file.c</code></li> <li>Shebang support: \u274c</li> </ul> <pre><code>// src/core/memory.c\n\n#include &lt;stdlib.h&gt;\n\nvoid* allocate_memory(size_t size) {\n    return malloc(size);\n}\n</code></pre>"},{"location":"user-guide/file-types/#shell-scripts","title":"Shell Scripts","text":"<ul> <li>Extensions: <code>.sh</code>, <code>.bash</code></li> <li>Comment style: <code># path/to/file.sh</code></li> <li>Shebang support: \u2705</li> </ul> <pre><code># scripts/deploy.sh\n\n#!/bin/bash\nset -e\n\necho \"Starting deployment...\"\n</code></pre>"},{"location":"user-guide/file-types/#configuration-files","title":"Configuration Files","text":""},{"location":"user-guide/file-types/#yaml","title":"YAML","text":"<ul> <li>Extensions: <code>.yml</code>, <code>.yaml</code></li> <li>Comment style: <code># path/to/file.yml</code></li> </ul> <pre><code># config/database.yml\n\ndevelopment:\n  adapter: postgresql\n  database: myapp_dev\n</code></pre>"},{"location":"user-guide/file-types/#toml","title":"TOML","text":"<ul> <li>Extensions: <code>.toml</code></li> <li>Comment style: <code># path/to/file.toml</code></li> </ul> <pre><code># pyproject.toml\n\n[tool.path-comment]\nexclude_globs = [\"*.md\"]\n</code></pre>"},{"location":"user-guide/file-types/#build-files","title":"Build Files","text":""},{"location":"user-guide/file-types/#makefile","title":"Makefile","text":"<ul> <li>Extensions: <code>Makefile</code>, <code>makefile</code></li> <li>Comment style: <code># path/to/Makefile</code></li> </ul> <pre><code># Makefile\n\n.PHONY: build test\n\nbuild:\n    poetry build\n</code></pre>"},{"location":"user-guide/file-types/#file-detection","title":"File Detection","text":"<p>path-comment-hook uses the <code>identify</code> library to detect file types. This provides robust detection based on:</p> <ol> <li>File extensions</li> <li>File names (e.g., <code>Makefile</code>)</li> <li>Shebang lines (e.g., <code>#!/usr/bin/python3</code>)</li> </ol>"},{"location":"user-guide/file-types/#shebang-handling","title":"Shebang Handling","text":"<p>Files with shebangs have special handling:</p>"},{"location":"user-guide/file-types/#python-script-with-shebang","title":"Python Script with Shebang","text":"<pre><code>#!/usr/bin/env python3\n# scripts/process_data.py\n\nimport sys\n\nif __name__ == \"__main__\":\n    print(\"Processing data...\")\n</code></pre> <p>The path header is placed after the shebang line.</p>"},{"location":"user-guide/file-types/#shell-script-with-shebang","title":"Shell Script with Shebang","text":"<pre><code>#!/bin/bash\n# scripts/backup.sh\n\nset -euo pipefail\n\necho \"Starting backup...\"\n</code></pre>"},{"location":"user-guide/file-types/#unsupported-file-types","title":"Unsupported File Types","text":"<p>Some file types are automatically excluded:</p>"},{"location":"user-guide/file-types/#binary-files","title":"Binary Files","text":"<ul> <li>Images (<code>.png</code>, <code>.jpg</code>, <code>.gif</code>)</li> <li>Executables (<code>.exe</code>, <code>.bin</code>)</li> <li>Archives (<code>.zip</code>, <code>.tar.gz</code>)</li> </ul>"},{"location":"user-guide/file-types/#documentation","title":"Documentation","text":"<ul> <li>Markdown (<code>.md</code>)</li> <li>RestructuredText (<code>.rst</code>)</li> <li>Plain text (<code>.txt</code>)</li> </ul>"},{"location":"user-guide/file-types/#data-files","title":"Data Files","text":"<ul> <li>JSON (<code>.json</code>)</li> <li>CSV (<code>.csv</code>)</li> <li>XML (<code>.xml</code>)</li> </ul>"},{"location":"user-guide/file-types/#adding-new-file-types","title":"Adding New File Types","text":"<p>To add support for a new file type:</p> <ol> <li> <p>Check if identify supports it:    <pre><code>from identify.identify import tags_from_path\nprint(tags_from_path(\"example.rs\"))  # ['rust']\n</code></pre></p> </li> <li> <p>Add to COMMENT_PREFIXES:    <pre><code># In src/path_comment/detectors.py\nCOMMENT_PREFIXES[\"rust\"] = \"//\"\n</code></pre></p> </li> <li> <p>Test the change:    <pre><code>path-comment-hook test.rs\n</code></pre></p> </li> </ol>"},{"location":"user-guide/file-types/#contributing-new-file-types","title":"Contributing New File Types","text":"<p>We welcome contributions for new file types! Please:</p> <ol> <li>Open an issue first to discuss</li> <li>Include example files</li> <li>Add tests for the new file type</li> <li>Update documentation</li> </ol> <p>Popular requested file types: - Rust (<code>.rs</code>) - <code>//</code> comments - Go (<code>.go</code>) - <code>//</code> comments - TypeScript (<code>.ts</code>) - <code>//</code> comments - Swift (<code>.swift</code>) - <code>//</code> comments</p>"},{"location":"user-guide/file-types/#file-type-examples","title":"File Type Examples","text":""},{"location":"user-guide/file-types/#complete-examples","title":"Complete Examples","text":"<p>Here are complete examples showing how different file types look with path headers:</p> PythonJavaScriptCYAML <pre><code># src/models/user.py\n\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass User:\n    name: str\n    email: str\n    age: Optional[int] = None\n</code></pre> <pre><code>// src/components/Button.js\n\nimport React from 'react';\n\nexport function Button({ children, onClick }) {\n    return (\n        &lt;button onClick={onClick}&gt;\n            {children}\n        &lt;/button&gt;\n    );\n}\n</code></pre> <pre><code>// src/utils/string_utils.c\n\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n\nchar* string_duplicate(const char* source) {\n    size_t len = strlen(source) + 1;\n    char* dest = malloc(len);\n    if (dest) {\n        strcpy(dest, source);\n    }\n    return dest;\n}\n</code></pre> <pre><code># .github/workflows/ci.yml\n\nname: CI\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n</code></pre>"},{"location":"user-guide/file-types/#customization","title":"Customization","text":""},{"location":"user-guide/file-types/#excluding-file-types","title":"Excluding File Types","text":"<p>If you don't want certain supported file types to be processed:</p> <pre><code>[tool.path-comment]\nexclude_globs = [\n    \"*.yml\",      # Skip YAML files\n    \"*.yaml\",     # Skip YAML files\n    \"Makefile*\",  # Skip Makefiles\n]\n</code></pre>"},{"location":"user-guide/file-types/#per-directory-rules","title":"Per-Directory Rules","text":"<p>You can have different rules for different directories:</p> <pre><code>[tool.path-comment]\nexclude_globs = [\n    \"tests/**/*.py\",     # Skip test files\n    \"scripts/**/*.sh\",   # Skip script files\n    \"config/**/*.yml\",   # Skip config files\n]\n</code></pre>"},{"location":"user-guide/file-types/#future-support","title":"Future Support","text":"<p>File types being considered for future support:</p> <ul> <li>Go (<code>.go</code>) - <code>//</code> style comments</li> <li>Rust (<code>.rs</code>) - <code>//</code> style comments</li> <li>TypeScript (<code>.ts</code>, <code>.tsx</code>) - <code>//</code> style comments</li> <li>Swift (<code>.swift</code>) - <code>//</code> style comments</li> <li>Kotlin (<code>.kt</code>) - <code>//</code> style comments</li> <li>PHP (<code>.php</code>) - <code>//</code> or <code>#</code> style comments</li> </ul>"},{"location":"user-guide/file-types/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/file-types/#file-not-processed","title":"File Not Processed","text":"<p>If a file isn't being processed:</p> <ol> <li> <p>Check if it's supported:    <pre><code>path-comment-hook --verbose your-file.ext\n</code></pre></p> </li> <li> <p>Check exclusion patterns:    <pre><code>path-comment-hook show-config\n</code></pre></p> </li> <li> <p>Verify file type detection:    <pre><code>from identify.identify import tags_from_path\nprint(tags_from_path(\"your-file.ext\"))\n</code></pre></p> </li> </ol>"},{"location":"user-guide/file-types/#wrong-comment-style","title":"Wrong Comment Style","text":"<p>If the comment style looks wrong: - File might be detected as a different type - Check the <code>identify</code> output - File might have ambiguous extension</p>"},{"location":"user-guide/file-types/#see-also","title":"See Also","text":"<ul> <li>Configuration - Exclude file types</li> <li>CLI Usage - Process specific file types</li> </ul>"},{"location":"user-guide/pre-commit-setup/","title":"Pre-commit Setup","text":"<p>Integrate path-comment-hook with pre-commit for automatic path header management. This ensures path headers are consistently applied across your team's workflow.</p>"},{"location":"user-guide/pre-commit-setup/#installation","title":"Installation","text":"<p>First, install pre-commit:</p> <pre><code># Using pip\npip install pre-commit\n\n# Using pipx\npipx install pre-commit\n\n# Using conda\nconda install -c conda-forge pre-commit\n</code></pre>"},{"location":"user-guide/pre-commit-setup/#configuration","title":"Configuration","text":"<p>Create or update <code>.pre-commit-config.yaml</code> in your project root:</p> <pre><code>repos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0  # Use the latest version\n    hooks:\n      - id: path-comment\n</code></pre> <p>Install the pre-commit hooks:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"user-guide/pre-commit-setup/#basic-usage","title":"Basic Usage","text":"<p>Once configured, the hook runs automatically on git commits:</p> <pre><code>git add .\ngit commit -m \"Your commit message\"\n# path-comment-hook runs automatically\n</code></pre>"},{"location":"user-guide/pre-commit-setup/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"user-guide/pre-commit-setup/#custom-arguments","title":"Custom Arguments","text":"<p>Pass additional arguments to the hook:</p> <pre><code>repos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0\n    hooks:\n      - id: path-comment\n        args: [--workers=2, --progress]\n</code></pre>"},{"location":"user-guide/pre-commit-setup/#file-filtering","title":"File Filtering","text":"<p>Limit which files the hook processes:</p> <pre><code>repos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0\n    hooks:\n      - id: path-comment\n        files: ^src/.*\\.py$  # Only Python files in src/\n</code></pre>"},{"location":"user-guide/pre-commit-setup/#integration-with-other-hooks","title":"Integration with Other Hooks","text":"<p>Recommended order with other formatting tools:</p> <pre><code>repos:\n  # First: Add path headers\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0\n    hooks:\n      - id: path-comment\n\n  # Then: Format code\n  - repo: https://github.com/psf/black\n    rev: 23.1.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n</code></pre>"},{"location":"user-guide/pre-commit-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/pre-commit-setup/#hook-fails-on-large-projects","title":"Hook Fails on Large Projects","text":"<p>For large codebases, increase timeout or reduce workers:</p> <pre><code>repos:\n  - repo: https://github.com/Shorzinator/path-comment-hook\n    rev: v0.3.0\n    hooks:\n      - id: path-comment\n        args: [--workers=1]\n</code></pre>"},{"location":"user-guide/pre-commit-setup/#skip-the-hook-temporarily","title":"Skip the Hook Temporarily","text":"<p>Skip path-comment-hook for a specific commit:</p> <pre><code>git commit -m \"Message\" --no-verify\n</code></pre> <p>Or skip just this hook:</p> <pre><code>SKIP=path-comment git commit -m \"Message\"\n</code></pre>"},{"location":"user-guide/pre-commit-setup/#update-hook-version","title":"Update Hook Version","text":"<p>Update to the latest version:</p> <pre><code>pre-commit autoupdate\n</code></pre>"},{"location":"user-guide/pre-commit-setup/#best-practices","title":"Best Practices","text":"<ol> <li>Pin versions: Always specify a version in <code>rev:</code></li> <li>Test first: Run <code>pre-commit run --all-files</code> before committing</li> <li>Team coordination: Ensure all team members use the same configuration</li> <li>CI integration: Run pre-commit in CI to catch issues</li> </ol>"},{"location":"user-guide/pre-commit-setup/#see-also","title":"See Also","text":"<ul> <li>CLI Usage - Command-line options</li> <li>Configuration - Customize behavior</li> </ul>"}]}
